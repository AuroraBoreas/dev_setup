{
	"python-ifmain": {
		"prefix": "ifmain",
		"body": [
			"def main() -> None:",
			"\tpass$0\n",
			"if __name__ == '__main__':",
			"\tmain()"
		],
		"description": "if __name__ == '__main__', sync"
	},

	"python-ifamain": {
		"prefix": "ifamain",
		"body": [
			"async def main() -> None:",
			"\tpass$0\n",
			"if __name__ == '__main__':",
			"\tasyncio.run(main())"
		],
		"description": "if __name__ == '__main__', async"
	},

	"pvm": {
		"prefix": "pvm",
		"body": [
			"def ${1:method_name}($2) -> None:",
			"\traise NotImplementedError$0\n",
		],
		"description": "method, function"
	},

	"pobm": {
		"prefix": "pobm",
		"body": [
			"def ${1:method_name}($2) -> ${3:T}:",
			"\traise NotImplementedError$0\n",
		],
	},

	"pxom": {
		"prefix": "pxom",
		"body": [
			"def ${1:method_name}($0) -> ${2|list,set,tuple|}[${3:T}]:",
			"\traise NotImplementedError$0\n",
		],
		"description": "public method returns list|set|tuple of object"
	},

	"pmom": {
		"prefix": "pmom",
		"body": [
			"def ${1:method_name}($0) -> dict[${2:TKey}, ${3:TElement}]:",
			"\traise NotImplementedError$0\n",
		],
		"description": "public method returns dict of object"
	},

	"xob": {
		"prefix": "xob",
		"body": [
			"${1:obj}: ${2|list,tuple,set,Queue|}[${3:T}] = $2()",
		],
		"description": "list|tuple|set|queue of objects"
	},

	"mob": {
		"prefix": "mob",
		"body": [
			"${1:obj}: dict[${2:TKey}, ${3:TElement}] = dict()",
		],
		"description": "dict of object"
	},

	"var": {
		"prefix": "var",
		"body": [
			"${1:obj}: ${2:T} = ${3:None}",
		],
		"description": "variable, primitive type"
	},

	"varc": {
		"prefix": "varc",
		"body": [
			"${1:obj}: ${2:T} = $2($0)",
		],
		"description": "variable, custom type"
	},

	"python-pickle-serialize": {
		"prefix": "py-pickle-serialize",
		"body": [
			"with open('${1:d}.dat', 'wb') as f:",
			"\tpickle.dump(${2:obj}, f)\n",
			"with open('$1.dat', 'rb') as f:",
			"\tdat = pickle.load(f)\n",
		],
		"description": "pickle, serialize and deserialize object"
	},

	"python-json-serialize": {
		"prefix": "py-json-serialize",
		"body": [
			"filename = '${1:qdConfig}.json'",
			"with open(filename, 'w') as f:",
			"\tjson.dump(${2:obj}, f, indent=2)",
			"with open(filename, 'r') as f:",
			"\tdata = json.load(f)",
		],
		"description": "json, serialize and deserialize object"
	},

	"python-isprime": {
		"prefix": "py-IsPrime",
		"body": [
			"def is_prime(n: int) -> bool:",
			"\tif n <= 1: return False",
			"\tif n == 2: return True",
			"\tfor i in range(2, int(n**0.5) + 1):",
			"\t\tif n % i == 0:",
			"\t\t\treturn False",
			"\t\treturn True\n",
		],
		"description": "is_prime"
	},

	"python-capture-stdout": {
		"prefix": "py-capture-stdout",
		"body": [
			"process = subprocess.run(",
			"\t['${1:cmd}', '${2:sub-cmd}'],",
			"\tcapture_output=True,",
			"\ttext=True",
			")",
			"output = process.stdout.rstrip()",
		],
		"description": "subprocess, capture stdout"
	},

	"python-fori": {
		"prefix": "fori",
		"body": [
			"for ${1:i} in ${2:collection}:",
			"\t$3",
		],
		"description": "fori"
	},

	"python-forr": {
		"prefix": "forr",
		"body": [
			"for ${1:i} in ${2:collection}[::-1]:",
			"\t$3",
		],
		"description": "for reverse"
	},

	"python-string-translate": {
		"prefix": "py-translate",
		"body": [
			"tbl = str.maketrans('abc', 'xyz')",
			"${1:txt}.translate(tbl)",
		],
		"description": "string, translate"
	},

	"python-namedtuple": {
		"prefix": "py-namedtuple",
		"body": [
			"${1:MyTuple} = namedtuple('$1', '${2:field1} ${3:field2}')",
		],
		"description": "namedtuple, or record in Java / C#"
	},

	"python-expired": {
		"prefix": "py-expired",
		"body": [
			"def is_expired(expired: str='${1:Sep 1 2020} 8:00AM') -> bool:",
			"\tend = datetime.datetime.strptime(expired,'%b %d %Y %I:%M%p')",
			"\tnow = datetime.datetime.now()",
			"\treturn (now - end) > datetime.timedelta(days=1)",
		],
		"description": "is_expired(...)"
	},

	"python-authorized": {
		"prefix": "py-authorized",
		"body": [
			"def is_authorized(authorized_users: list[str]) -> bool:",
			"\treturn getpass.getuser() in authorized_users",
		],
		"description": "is_authorized(...)"
	},

	"python-dialog": {
		"prefix": "py-dialog",
		"body": [
			"root = tk.Tk()",
			"root.withdraw()",
			"fd_path = filedialog.askdirectory()",
			"if os.path.isdir(fd_path):",
			"\t${1:...}",
			"root.destroy()",
		],
		"description": "tkinter.filedialog.askdirectory(...)"
	},

	"python-logging": {
		"prefix": "py-logging",
		"body": [
			"logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')",
		],
		"description": "logging, basicConfig"
	},

	"python-logger": {
		"prefix": "py-logger",
		"body": [
			"logger = logging.getLogger(__name__)",
			"handler = logging.StreamHandler()",
			"formatter = logging.Formatter(fmt='%(asctime)s %(levelname)s: %(message)s')",
			"handler.formatter = formatter",
			"logger.addHandler(handler)",
			"logger.setLevel(logging.INFO)",
		],
		"description": "logger, basicConfig"
	},

	"python-class": {
		"prefix": "py-class",
		"body": [
			"@dataclass",
			"class ${1:MyClass}:",
			"\tx",
			"\ty = field(default_factory=list, init=True, repr=False, hash=True, compare=True)",
			"\tz = field(repr=False, default=3.14)\n",
		],
		"description": "class construction, dataclass"
	},

	"python-decorator-FBD-permission": {
		"prefix": "py-fbd-Permission",
		"body": [
			"def check_permission(permission: (str|int)) -> typing.Callable[P,T]:",
			"\tdef decorator(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\tdef wrapper(*args: P.args, **kwargs: P.kwargs) -> typing.Any:",
			"\t\t\tif permission == 'admin':",
			"\t\t\t\tprint('pass')",
			"\t\t\t\tresult = func(*args, **kwargs)",
			"\t\t\telse:",
			"\t\t\t\tprint('no access')",
			"\t\t\t\tresult = None",
			"\t\t\treturn result",
			"\t\treturn wrapper",
			"\treturn decorator",
		],
		"description": "permission decorator"
	},

	"python-decorator-FBD-singleton": {
		"prefix": "py-fbd-SingletonToClass",
		"body": [
			"def singleton(cls: typing.Type) -> typing.Callable[P,T]:",
			"\tinstances = {}",
			"\tdef wrapper(*args: P.args, **kwargs: P.kwargs) -> dict[typing.Type, object]:",
			"\t\tif cls not in instances:",
			"\t\t\tinstances[cls] = cls(*args, **kwargs)",
			"\t\treturn instances[cls]",
			"\treturn wrapper\n",
		],
		"description": "Singleton decorator against class"
	},

	"python-decorator-FBD-Function-Calls-limit": {
		"prefix": "py-fbd-FunctionCallsLimit",
		"body": [
			"_T = typing.Callable[P,T]\n",
			"def calls_limit(n: int) -> _T:",
			"\tdef decorator(func: _T) -> _T:",
			"\t\tdef wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t\twrapper.calls += 1",
			"\t\t\tif wrapper.calls <= n:",
			"\t\t\t\treturn func(*args, **kwargs)",
			"\t\t\telse:",
			"\t\t\t\treturn",
			"\t\twrapper.calls = 0",
			"\t\treturn wrapper",
			"\treturn decorator\n",
		],
		"description": "function-calls-limit decorator against functions"
	},

	"python-FBD-class": {
		"prefix": "py-fbd-ToClassAttribute",
		"body": [
			"def bonk(t: datetime) -> typing.Callable[P,T]:",
			"\tdef decorator(cls: typing.Type) -> typing.Type:",
			"\t\tclass Wrapper:",
			"\t\t\tdef __init__(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\t\t\t\tself.wrapped = cls(*args, **kwargs)\n",
			"\t\t\tdef __getattr__(self, name: str) -> typing.Any:",
			"\t\t\t\tattr = getattr(self.wrapped, name)",
			"\t\t\t\tif callable(attr):",
			"\t\t\t\t\tdef wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t\t\t\t\tif t > datetime.now():",
			"\t\t\t\t\t\t\treturn attr(*args, **kwargs)",
			"\t\t\t\t\t\telse:",
			"\t\t\t\t\t\t\treturn",
			"\t\t\t\t\treturn wrapper",
			"\t\t\t\telse:",
			"\t\t\t\t\treturn attr",
			"\t\treturn Wrapper",
			"\treturn decorator\n",
		],
		"description": "decorator, function-based decorator against class attributes (properties, methods)"
	},

	"python-FBD-To-class": {
		"prefix": "py-fbd-ToClass",
		"body": [
			"def pank(t: datetime) -> typing.Callable[P,T]:",
			"\tdef wrapper(cls: typing.Type) -> T:",
			"\t\tif t < datetime.now():",
			"\t\t\traise ValueError",
			"\t\treturn cls",
			"\treturn wrapper\n",
		],
		"description": "decorator, a function-based decorator against class"
	},

	"python-FBD-To-function": {
		"prefix": "py-fbd-ToFunction",
		"body": [
			"def dank(t: datetime) -> typing.Callable[P,T]:",
			"\tdef decorator(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\tdef wrapper(*args: P.args, **kwargs: P.kwargs) -> (typing.Any|None):",
			"\t\t\tif t > datetime.now():",
			"\t\t\t\treturn func(*args, **kwargs)",
			"\t\t\telse:",
			"\t\t\t\treturn",
			"\t\treturn wrapper",
			"\treturn decorator\n",
		],
		"description": "decorator, a function-based decorator against function"
	},

	"python-CBD-generic": {
		"prefix": "py-cbd-ToFunction",
		"body": [
			"class Plank:",
			"\tdef __init__(self, arg: typing.Callable[P,T]) -> None:",
			"\t\tself._arg = arg\n",
			"\tdef __call__(self, *args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tretval = self._arg(*args, **kwargs)",
			"\t\treturn retval$0",
		],
		"description": "decorator, a class-based decorator"
	},

	"python-ctx-hasCtx": {
		"prefix": "py-ctx-hasCtx",
		"body": [
			"from contextlib import AbstractContextManager\n",
			"def has_context_manager(obj) -> bool:",
			"\treturn callable(getattr(obj, '__enter__', None)) and callable(getattr(obj, '__exit__', None)) or isinstance(obj, AbstractContextManager)",
		],
		"description": "Contextlib, check if an object supports context manager protocol"
	},

	"python-ctx-timer": {
		"prefix": "py-ctx-Timer",
		"body": [
			"@contextlib.contextmanager",
			"def timer(name: str) -> Generator[None,None,None]:",
			"\tt0 = time.monotonic()",
			"\ttry:",
			"\t\tyield",
			"\tfinally:",
			"\t\tt1 = time.monotonic()",
			"\t\tlogging.info(f'{name} took: {t1-t0}')",
		],
		"description": "timer, easier version"
	},

	"python-decorator-FBD-timer": {
		"prefix": "py-fbd-Timer",
		"body": [
			"DEFAULT_FMT = '[{elapsed:0.8f}s] {name}(...) -> {result}'\n",
			"def timer(fmt: str=DEFAULT_FMT) -> typing.Callable[P,T]:",
			"\tdef decorator(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\t@functools.wraps(func)",
			"\t\tdef timed(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t\tstart = time.time()",
			"\t\t\t_result = func(*args, **kwargs)",
			"\t\t\telapsed = time.time() - start",
			"\t\t\tname = func.__name__",
			"\t\t\tresult = repr(_result)",
			"\t\t\tlogging.info(fmt.format(**locals()))",
			"\t\t\treturn _result",
			"\t\treturn timed",
			"\treturn decorator\n",
		],
		"description": "timer"
	},

	"python-ctx-excel": {
		"prefix": "py-ctx-Excel",
		"body": [
			"@contextlib.contextmanager",
			"def OpenExcel() -> None:",
			"\t'''return excel application object\n",
			"\tYields:",
			"\t\t[type]: excel application object\n",
			"\tRef link: https://stackoverflow.com/questions/19616205/running-an-excel-macro-via-python",
			"\t'''",
			"\texcel = win32com.client.Dispatch('Excel.Application')",
			"\texcel.Visible = False",
			"\ttry:",
			"\t\tyield excel",
			"\tfinally:",
			"\t\t# excel.Application.Save() # if you want to save then uncomment this line and change delete the ', ReadOnly=1' part from the open function.",
			"\t\texcel.Application.Quit()",
			"\t\tdel excel\n",
			"@contextlib.contextmanager",
			"def OpenWorkbook(excel, xl_file) -> None:",
			"\t'''return workbook object via excel application\n",
			"\tArgs:",
			"\t\texcel ([type]): excel application object",
			"\t\txl_file ([type]): excel file(*.xlsm) that contains macro\n",
			"\tYields:",
			"\t\t[type]: workbook object\n",
			"\tRef link: https://stackoverflow.com/questions/49904045/win32com-save-as-variable-name-in-python-3-6",
			"\t'''",
			"\txl_file  = os.path.expanduser(xl_file)",
			"\tworkbook = excel.Workbooks.Open(Filename=xl_file, ReadOnly=1)",
			"\ttry:",
			"\t\tyield workbook",
			"\tfinally:",
			"\t\t# workbook.Save()",
			"\t\tworkbook.Close(False)\n",
			"def call_vba_macro(xl_file: str, macro_name: str) -> None:",
			"\t'''call vba macro to complement miss data and summarize inputs, due to time efficiency",
			"\tvba is much faster than python + xlrd",
			"\t'''",
			"\tmacro_addr = '\\'{0}\\'!{1}'.format(xl_file, macro_name)",
			"\tif os.path.exists(xl_file):",
			"\t\twith OpenExcel() as excel:",
			"\t\t\ttry:",
			"\t\t\t\twith OpenWorkbook(excel, xl_file) as workbook:",
			"\t\t\t\t\t# possible workbook usage",
			"\t\t\t\t\texcel.Application.Run(macro_addr) # run macro in the workbook",
			"\t\t\texcept Exception as e:",
			"\t\t\t\t# print(xl_file)",
			"\t\t\t\ttraceback.print_exc()",
		],
		"description": "Python interacts with MS Excel including open, run vba macros etc"
	},

	"python-ctx-random-state": {
		"prefix": "py-ctx-Randomstate",
		"body": [
			"@contextlib.contextmanager",
			"def random_state(seed: int|None) -> typing.Generator[None,None,None]:",
			"\tstate = random.getstate()",
			"\trandom.seed(seed)",
			"\ttry:",
			"\t\tyield",
			"\tfinally:",
			"\t\trandom.setstate(state)",
		],
		"description": "decorator, random_state"
	},

	"python-decorator-FBD-deprecated": {
		"prefix": "py-fbd-Deprecated",
		"body": [
			"def deprecated(message: str, stacklevel: int=2) -> typing.Callable[P,T]:",
			"\tdef _wrapper(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\t@wraps(func)",
			"\t\tdef _deprecated_func(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t\twarnings.warn(f'`{func.__name__}` is deprecated. {message}', category=DeprecationWarning, stacklevel=stacklevel)",
			"\t\t\treturn func(*args, **kwargs)",
			"\t\treturn _deprecated_func",
			"\treturn _wrapper",
		],
		"description": "decorator, deprecated warning"
	},

	"python-decorator-FBD-memoir": {
		"prefix": "py-fbd-Memoir",
		"body": [
			"def memoir(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tcache = {}",
			"\t@functools.wraps(func)",
			"\tdef memorized(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tkey = (func.__name__, args.__hash__, kwargs.__hash__)",
			"\t\tif key not in cache:",
			"\t\t\tcache[key] = func(*args, **kwargs)",
			"\t\treturn cache[key]",
			"\treturn memorized",
			"$0"
		],
		"description": "cache, memorization"
	},

	"python-decorator-FBD-regist": {
		"prefix": "py-fbd-Register",
		"body": [
			"registry: set[Callable[P,T]] = set()",
			"def register(active: bool=True) -> typing.Callable[P,T]:",
			"\tdef decorate(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\tif active:",
			"\t\t\tregistry.add(func)",
			"\t\telse:",
			"\t\t\tregistry.discard(func)",
			"\t\treturn func",
			"\treturn decorate",
		],
		"description": "register functions into a set(...)"
	},

	"python-print": {
		"prefix": "cout",
		"body": [
			"print($0)",
		],
		"description": "print stmt"
	},

	"python-Generator-yield": {
		"prefix": "py-Generator",
		"body": [
			"def ${1:methodName}(n: object) -> Generator[int,int,str]:",
			"\tresult = 1",
			"\twhile True:",
			"\t\tfactor = yield result",
			"\t\tif factor is None: break",
			"\t\tresult *= factor",
			"\tyield f'{n}: result={result}'\n",
		],
		"description": "python, yield, send(None), return after StopIteration"
	},

	"python-Generator-yield-from": {
		"prefix": "py-Flatten",
		"body": [
			"def flatten(nested_list: typing.Sequence[typing.Sequence]) -> typing.Generator[${1:T},None,None]:",
			"\tfor e in nested_list:",
			"\t\tif isinstance(e, list): yield from flatten(e)",
			"\t\telse: yield e\n",
		],
		"description": "python, yield from, flatten a nested list or chain Generators"
	},

	"python-descriptor": {
		"prefix": "py-Descriptor",
		"body": [
			"def __set_name__(self, owner: object, name: str) -> None:",
			"\tself.${1:private_name} = f'_{name}'\n",
			"def __get__(self, obj: object, objtype: type) -> typing.Any:",
			"\tif obj:",
			"\t\treturn getattr(obj, self.$1, None)",
			"\treturn getattr(objtype, self.$1, None)\n",
			"def __set__(self, obj: object, value: typing.Any) -> None:",
			"\tsetattr(obj, self.$1, value)\n",
			"def __delete__(self, obj: object) -> None:",
			"\tdelattr(obj, self.$1)\n",
		],
		"description": "python, descriptor, attributes CRUD"
	},

	"python-Threadpool": {
		"prefix": "py-ThreadPoolExec",
		"body": [
			"from concurrent.futures import ThreadPoolExecutor",
			"jobs = [$1]",
			"func = ${2:None}",
			"with ThreadPoolExecutor(max_workers=${1:15}) as executor:",
			"\tfutures = []",
			"\tfor job in jobs:",
			"\t\tfutures.append(executor.submit(func, arg=job))",
			"\tfor future in futures.as_completed(futures):",
			"\t\tprint(future.result())",
		],
		"description": "concurrent, futures, ThreadPoolExecutor"
	},

	"python-Processpool": {
		"prefix": "py-ProcessPoolExec",
		"body": [
			"from concurrent.futures import ProcessPoolExecutor",
			"jobs = [$1]",
			"func = ${2:None}",
			"with ProcessPoolExecutor(max_workers=${3:4}) as executor:",
			"\tresult = ${4|executor.map(),list(executor.map(lambda p: func(*p)))|}",
		],
		"description": "concurrent, futures, ProcessPoolExecutor"
	},

	"python-fjt": {
		"prefix": "py-MultiprocessPool",
		"body": [
			"jobs = [$1]",
			"func = ${2:None}",
			"with multiprocessing.Pool(processes=${3:4}) as pool:",
			"\tresult = pool.${4|map,starmap|}(func, args=jobs)",
		],
		"description": "multiprocessing, pool"
	},

	"python-async-apvm": {
		"prefix": "apvm",
		"body": [
			"async def ${1:methodName}($2) -> None:",
			"\t$0"
		],
		"description": "async, coroutine, define"
	},

	"python-async-apobm": {
		"prefix": "apobm",
		"body": [
			"async def ${1:methodName}($2) -> ${3:T}:",
			"\t$0"
		],
		"description": "async, coroutine, define"
	},

	"python-arun": {
		"prefix": "arun",
		"body": [
			"asyncio.run($0)"
		],
		"description": "async, coroutine, run"
	},

	"python-agather": {
		"prefix": "agather",
		"body": [
			"results = await asyncio.gather(",
			"\t$1,",
			")",
		],
		"description": "async, coroutine, gather"
	},

	"python-acomplete": {
		"prefix": "acompleted",
		"body": [
			"tasks = [",
			"\t$1",
			"]",
			"for completed in asyncio.as_completed(tasks):",
			"\tresult = await completed",
			"\t$0",
		],
		"description": "async, coroutine, completed"
	},

	"python-exception-custom": {
		"prefix": "py-ExceptionCustom",
		"body": [
			"class ${1:MyClass}Exception(Exception):",
			"\terror_timestamp = datetime.now()",
			"\tcause_of_error = None",
			"\tdef __init__(self, message: str, error_timestamp: datetime, cause_of_error: str) -> None:",
			"\t\tsuper().__init__(message)",
			"\t\tself.error_timestamp = error_timestamp",
			"\t\tself.cause_of_error = cause_of_error",
		],
		"description": "Exception, customized"
	},

	"python-auto-variables": {
		"prefix": "py-AutoVar",
		"body": [
			"def auto_gen_variables(seq: typing.Sequence) -> dict[str,object]:",
			"\tvariables = {}",
			"\tfor i, p in enumerate(seq):",
			"\t\tvariable_name = f'p{i+1}'",
			"\t\tvariables[variable_name] = p",
			"\treturn variables"
		],
		"description": "class, create variables and initialize automatically"
	},

	"python-auto-nested-loops": {
		"prefix": "py-AutoNestedLoops",
		"body": [
			"def generate_nested_loops(n_variables: int, possible_values: typing.Sequence, loop_variables: list[${1:T}]=[]) -> Generator[${2:R}]:",
			"\tif len(loop_variables) == n_variables:",
			"\t\t# Base case: when we reach the desired number of variables, print the loop variables",
			"\t\tyield loop_variables",
			"\telse:",
			"\t\t# Recursive case: generate nested loops for the next variable",
			"\t\tfor val in possible_values:",
			"\t\t\tloop_variables.append(val)",
			"\t\t\tyield from generate_nested_loops(n_variables, possible_values, loop_variables)",
			"\t\t\tloop_variables.pop()",
		],
		"description": "class, generate nested loops automatically"
	},

	"python-class-ctor": {
		"prefix": "ctor",
		"body": [
			"def __init__(self, *args: P.args, **kwargs: P.kwargs$0) -> None:",
			"\tpass",
		],
		"description": "class, constructor"
	},

	"python-class-prop": {
		"prefix": "prop",
		"body": [
			"@property",
			"def ${1:fieldName}(self) -> ${2:T}:",
			"\treturn self.${3:field}",
			"@$1.setter",
			"def $1(self, val: $2) -> None:",
			"\tself.$3 = val",
			"@$1.deleter",
			"def $1(self) -> $2:",
			"\tdel self.$3",
		],
		"description": "class, property"
	},

	"python-class-tostring": {
		"prefix": "tostring",
		"body": [
			"def __str__(self) -> str:",
			"\treturn f'{self.__class__.__name__}: {self.__dict__}'",
		],
		"description": "class, tostring()"
	},

	"python-bootstrap": {
		"prefix": "py-Bootstrap",
		"body": [
			"def plot_bootstrap(",
			"\tdata: (list[int | float] | pd.DataFrame),",
			"\tstatistic_func: typing.Callable=np.std,",
			"\tci: float=0.95,",
			"\tbins: int=50",
			") -> None:",
			"\trng = np.random.default_rng()",
			"\tdata = (data,)  # samples must be in a sequence",
			"\tres = stats.bootstrap(data, statistic_func, confidence_level=ci, random_state=rng)",
			"\tfig, ax = plt.subplots()",
			"\tax.hist(res.bootstrap_distribution, bins=bins, density=True)",
			// "\tsns.histplot(res.bootstrap_distribution, stat='density', kde=True, ax=ax)",
			"\tax.set_title('Bootstrap Distribution')",
			"\tax.set_xlabel('statistic value: ' + statistic_func.__qualname__)",
			"\tax.set_ylabel('frequency')",
			"\tplt.show()",
			"\treturn",
		],
		"description": "scipy.stats.bootstrap(...)"
	},

	"scipy-linprog": {
		"prefix": "sc-linprog",
		"body": [
			"scipy.linprog(",
			"\tc=[$1],",
			"\tA_ub=[",
			"\t\t[$2],",
			"\t\t[$3]",
			"\t],",
			"\tb_ub=[$4],",
			"\tbounds=[",
			"\t\t(${5:None,None}),",
			"\t\t(${6:-3,None})",
			"\t]",
			")",
		],
		"description": "scipy.linprog"
	},

	"scipy-stats-chi2": {
		"prefix": "sc-chi2",
		"body": [
			"from scipy.stats import chi2_contingency\n",
			"chi2, p, dof, expected = chi2_contingency(${1:dat})",
		],
		"description": "scipy.stats.chi2_contingency"
	},

	"sympy-lcdi": {
		"prefix": "smp-lcdi",
		"body": [
			"from sympy import symbols, limit, integrate\n",
			"def ${1:find_lcdi}() -> object:",
			"\tx = symbols('x')",
			"\tf = ${2:(1 - sqrt(x)) / (1 - x)}",
			"\treturn ${3:limit}(f, x)",
		],
		"description": "sympy.limit, diff, integrate"
	},

	"sympy-poly": {
		"prefix": "smp-poly",
		"body": [
			"from sympy import symbols, Poly",
			"def find_sums_and_products_of_roots(c: list[int|float]) -> tuple[float]:",
			"\tx = symbols('x')",
			"\te = 0",
			"\tfor i, j in enumerate(c[::-1]): e += j * x ** i",
			"\tp = Poly(e, x)",
			"\tsor = -p.coeffs()[1] / p.coeffs()[0]",
			"\tpor = (-1)**p.degree() * p.coeffs()[-1] / p.coeffs()[0]",
			"\treturn sor, por",
		],
		"description": "sympy.poly, find sums and products of roots"
	},

	"sympy-factor": {
		"prefix": "smp-factor",
		"body": [
			"from sympy import symbols, factor",
			"x = symbols('x')",
			"poly = $0",
			"factor(poly)\n",
		],
		"description": "sympy.factor, factor a polynomial expression"
	},

	"sympy-expand": {
		"prefix": "smp-expand",
		"body": [
			"from sympy import symbols, expand",
			"x = symbols('x')",
			"poly = $0",
			"expand(poly)\n",
		],
		"description": "sympy.expand, expand a factored expression"
	},

	"python-ciztable": {
		"prefix": "py-stats-ciztable",
		"body": [
			"def get_zvalue_from_ci(ci: float=.95) -> float:",
			"\tciz: dict[float, float] = {",
			"\t\t.80  : 1.282,",
			"\t\t.85  : 1.440,",
			"\t\t.90  : 1.645,",
			"\t\t.95  : 1.960,",
			"\t\t.99  : 2.576,",
			"\t\t.995 : 2.807,",
			"\t\t.999 : 3.291,",
			"\t}",
			"\treturn ciz.get(ci,1.960)\n",
			"def get_margin_of_error(z: float, sd: float, n: int) -> float:",
			"\treturn  z * sd / (n**.5)\n",
			"def find_confidence_limits_of(ci: float, n: int, mean: float, sd: float) -> tuple[float,float]:",
			"\tz = get_zvalue_from_ci(ci)",
			"\treturn mean - get_margin_of_error(z,sd,n), mean + get_margin_of_error(z,sd,n)\n",
		],
		"description": "stats, confidential interval and z-score, margin of error"
	},

	"python-group-theory": {
		"prefix": "py-gtheory",
		"body": [
			"#🌔 S B I: set, binary, identity",
			"#🐒 A I: associativity, inverse",
			"#",
		],
		"description": "group theory, mnemonic rhyme"
	},

	"python-calculus": {
		"prefix": "py-Calculus",
		"body": [
			"#🚀极连微积超函数",
			"#🍭序列截面矢空间",
			"#🌌多变多积向量场",
		],
		"description": "calculus, mnemonic rhyme"
	},

	"unittest-concepts": {
		"prefix": "unittest-concepts",
		"body": [
			"# --- Pattern ---",
			"# Concepts: mock + magicmock, patch, stub, double",
			"# TDD Pattern: Arrange, Act, Assert",
			"# BDD Pattern: given, when, then",
			"# Principle !important: mock the object where it is used not where it is defined",
			"# Expressions: patch (3-ways: decorator[class], decorator[function], inline)",
			"# Code cycle(R/G/R): write unittest which failed(Red), write the simplest codde to make it pass (Green), Refactor",
			"# Three Strikes and Refractor: 3-strikes",
			"# XUY: Code Under Test, System Under Test, Device Under Test ...",
			"# --- Mock ---",
			"# Designs: perform-expected-use-and-then-duplicate; record-actual-use-and-then-assert",
			"# ",
			"# ",
			"# ",
		],
		"description": "unittest, concetps"
	},

	"unittest-setup": {
		"prefix": "unittest-testsuite",
		"body": [
			"class Test${1:ClassName}(unittest.TestCase):",
			"\tdef setUp(self) -> None:",
			"\t\tself.${2:mock} = mock.patch('${3:path.to.target}', autospec=True)",
			"\t\tself.${4:target} = self.$2.start()",
			"\t\tself.$4.return_value = $5",
			"\t\tself.test_instance = $1($6)$0\n",
			"\tdef test_${7:methodName}(self) -> None:",
			"\t\tself.${8:assertEqual}($0)\n",
			"\tdef tearDown(self) -> None:",
			"\t\tself.$2.stop()\n",
			"if __name__ == '__main__':",
			"\tunittest.main()\n",
		],
		"description": "unittest, basic setup and tear down"
	},

	"unittest-test": {
		"prefix": "unittest-method",
		"body": [
			"def test_${1:methodName}(self) -> None:",
			"\tself.${2:assertEqual}($0)\n",
		],
		"description": "unittest, test_method(...)"
	},

	"unittest-mock-patch": {
		"prefix": "unittest-mock-patch",
		"body": [
			"@mock.patch('${1:path.to.target}', autospec=True)",
		],
		"description": "unittest, mock.patch(...)"
	},

	"unittest-mock-patch-object": {
		"prefix": "unittest-mock-object",
		"body": [
			"@mock.patch.object(${1:module},'${2:attr}', autospec=True)",
		],
		"description": "unittest, mock.patch.object(...)"
	},

	"unittest-mock-autospec": {
		"prefix": "unittest-mock-mock",
		"body": [
			"${1:obj} = mock.create_autospec(${2:target}, instance=True)",
		],
		"description": "unittest, mock.create_autospec(...)"
	},

	"unittest-mock-spy": {
		"prefix": "unittest-mock-spy",
		"body": [
			"${1:spy} = mock.Mock(wraps=${2:MyStub}())",
		],
		"description": "unittest, mock.Mock(), spy"
	},

	"unittest-mock-HttpResponse": {
		"prefix": "unittest-mock-HttpResponse",
		"body": [
			"def make_http(data, status=http_client.OK, headers=None):",
			"\tresponse = mock.create_autospec(${1:transport.Response}, instance=True)",
			"\tresponse.status = status",
			"\tresponse.data = _helpers.to_bytes(data)",
			"\tresponse.headers = headers or {}\n",
			"\thttp = mock.create_autospec($1)",
			"\thttp.return_value = response\n",
			"\treturn response",
		],
		"description": "unittest, mock HttpResponse"
	},

	"pdb-concepts": {
		"prefix": "pdb-concepts",
		"body": [
			"# meta command     : help, quit",
			"# see where you are: l(ist)+[none|.|first,last|l(ist)], w(here)",
			"# look what values : [p(rint)|pp]+expr, a(rgs)",
			"# exec (s n r c u) : s(tep), n(ext), r(eturn), c(ontinue), unt(il) lineno",
			"# ",
			"# ",
		],
		"description": "pdb, concepts"
	},

	"pytest-concepts": {
		"prefix": "pytest-concepts",
		"body": [
			"shortcut: (F M P C)",
			"# /* flags */",
			"# help: --help",
			"# setup: --setup-show",
			"# keyword: -k [pattern]",
			"# report: -ra -rfe",
			"# select tests with marker_name: -m \"pattern(nao+[marker_name])\"",
			"# capture: --capture=[no|?]",
			"# fixture: --fixtures --fixtures-per-test",
			"# markers: --markers",
			"# /* debug flags */",
			"# select which tests in what order when to stop",
			"# --lf         : run just the tests that failed last",
			"# --ff         : run all the tests, starting with the last failed",
			"# -x           : run all the tests, stops the test session after the first failure",
			"# --maxfail=num: stop tests after `num` failures",
			"# --nf         : run all the tests, ordered by file modification time",
			"# --sw         : stops the tests at the first failure. starts the tests at the last failure next time",
			"# --sw-skip    : same as `-sw` but skips the first failure",
			"# /* control-output flags */",
			"# -v : verbose",
			"# --tb=[auto|long|short|line|native|no]: control the traceback style",
			"# -l : displays the local variables alongside the stack tree",
			"# /* start command-line-debugger flags */",
			"# --pdb : starts an interactive debugging session at the point of failure",
			"# --trace: starts `pdb` source-code debugger immediately when running each test",
			"# --pdbcls: use alternative debugger such as `IPython` debugger with `--pdbcls=IPython.terminal.debugger:TerminalPdb`",
			"# /* fixtures */",
			"# fixture(like setUp & tearDown in unittest): Resource + Configuration before tests start",
			"# built-in: fs, capture, warning, recorder, monkeypatch, request",
			"# monkeypatch (A E I P): attr, env, item, path",
			"# /* markers */",
			"# markers: @pytest.mark.[fail|xfail|xpass|skip|skipif](...)",
			"# customization [@pytest.mark.marker_name(argc)]: <marker_name>:<description> + marker_parser",
			"# ",
			"# ",
			"# ",
		],
		"description": "pytest, concepts"
	},

	"pytest-plugin-build": {
		"prefix": "pytest-plugin-build",
		"body": [
			"import pytest\n",
			"__version__ = '0.0.1'\n\n",
			"def pytest_configure(config) -> None:",
			"\tconfig.addinivalue_line('markers', '${1:marker_name}: ${2:marker description}')\n",
			"def pytest_addoption(parser) -> None:",
			"\tparser.addoption(",
			"\t\t'${3:--slow}', action='${4:store_true}', help='${5:include tests marked slow}'",
			"\t)\n",
			"def pytest_collection_modifyitems(config, items) -> None:",
			"\tif not config.getoption('$3'):",
			"\t\t${6:skip_slow} = pytest.mark.skip(reason='need --slow option to run')$0",
			"\t\tfor item in items:",
			"\t\t\tif item.get_closest_marker('$1'):",
			"\t\t\t\titem.add_marker($6)\n\n",
			"pytest_plugins = ['${7:plugin_name}']",
		],
		"description": "pytest, conftest/pytest_{plugin_name}.py, (C O C) build a local/remote plugin"
	},

	"pytest-markers-argcParser": {
		"prefix": "pytest-markers-argcParser",
		"body": [
			"m = request.node.get_closest_marker('${1:marker_name}')",
			"if m and len(m) > 0:",
			"\t$1 = m.args[0]",
			"\t...$0",
		],
		"description": "pytest, conftest.py, parse customized marker with argc"
	},

	"pytest-markers-fileLevel": {
		"prefix": "pytest-markers-fileLevel",
		"body": [
			"pytestmark = pytest.mark.${1:marker_name}",
		],
		"description": "pytest, test_xxx.py, file-level markers, all tests in the file(module) will be marked with `marker_name`"
	},

	"pytest-markers-classLevel": {
		"prefix": "pytest-markers-classLevel",
		"body": [
			"@pytest.mark.${1:marker_name}",
		],
		"description": "pytest, test_xxx.py, class-level markers, all tests in the class will be marked with `marker_name`"
	},

	"pytest-assert-custom": {
		"prefix": "pytest-assert-custom",
		"body": [
			"def assert_${1:identical}(${2:arg1}: ${3:T}, ${4:arg2}: ${5:T}):",
			"\t__tracebackhide__ = True",
			"\tassert $2 == $4",
			"\tif $2.id != $4.id:",
			"\t\tpytest.fail(f\"id's don't match. {$2.id} != {$4.id}\")\n",
		],
		"description": "pytest, assertion customization"
	},

	"pytest-capture-stdout": {
		"prefix": "pytest-capture-output",
		"body": [
			"output = capsys.readouterr().out.rstrip()",
		],
		"description": "pytest, CLI, capture stdout stderr"
	},

	"pytest-raises": {
		"prefix": "pytest-raises",
		"body": [
			"def test_${1:methodName}_${2:raises_}($3) -> None:",
			"\tmatch_regex = '${4:missing 1 .* positional argument}'",
			"\twith pytest.raises(${5:TypeError}, match=match_regex):",
			"\t\t...$0\n",
		],
		"description": "pytest, test_xxx.py, raises(...)"
	},

	"pytest-fixture-build": {
		"prefix": "pytest-fixture-build",
		"body": [
			"@pytest.fixture(",
			"\tscope='${1:session}',",
			"\tparams=[",
			"\t\tpytest.param(${2:arg}, marks=[pytest.mark.${3:marker_name},], id=${4:None}),",
			"\t],",
			")",
			"def ${5:fixture_name}(${6:request}):",
			"\t# setUp",
			"\tyield $6.param$0",
			"\t# tearDown\n",
		],
		"description": "pytest, conftext.py, build fixture"
	},

	"pytest-parameterize-func": {
		"prefix": "pytest-parameterize-func",
		"body": [
			"@pytest.mark.parametrize(",
			"\t'${1:arg1}, ${2:arg2}, ${3:expected}',",
			"\t[",
			"\t\t${4:testcase1},$0",
			"\t]",
			"\tids=${5:func}",
			"\tindirect=['$1',]",
			")",
			"def test_${5:methodName}_${6}($1, $2, $3) -> None:",
			"\tresult = $5($1, $2)",
			"\tassert result == $3\n",
		],
		"description": "pytest, test_xxx.py, mark.parameterized.test, `same test, different data`"
	},

	"pytest-parameterize-fixture": {
		"prefix": "pytest-parameterize-fixture",
		"body": [
			"@pytest.fixture(params=[",
			"\t${1:testcase},$0",
			"])",
			"def start_state(request):",
			"\treturn request.param\n",
			"def test_${2:methodName}_${3}(start_state) -> None:",
			"\t${4:arg1},${5:arg2},${6:arg3} = start_state",
			"\tresult = $2($4, $5)",
			"\tassert $6 == result\n"
		],
		"description": "pytest, test_xxx.py, fixture(params=[...]), `same test, different start state`"
	},

	"pytest-parameterize-hook": {
		"prefix": "pytest-parameterize-hook",
		"body": [
			"def pytest_generate_tests(metafunc) -> None:",
			"\tif '${1:start_state}' in metafunc.fixturenames:",
			"\t\tmetafunc.parametrize(",
			"\t\t\t'$1',",
			"\t\t\t[",
			"\t\t\t\t${2:testcase},$0",
			"\t\t\t]",
			"\t\t)\n",
			"def test_${3:methodName}_$4($1) -> None:",
			"\t${5:arg1},${6:arg2},${7:c} = $1",
			"\tassert $7 == add($5,$6)\n",
		],
		"description": "pytest, test_xxx.py, pytest_generate_tests(metafunc), `same test, modify the parametrization list at test collection time`"
	},

	"pattern-matching": {
		"prefix": "pmatch",
		"body": [
			"match ${1:expr}:",
			"\tcase 1: # discrete value",
			"\t\t# <handle pattern1>\n\t\t...",
			"\tcase ${2: int()} as number: # or bind, shorthand `int(number)`",
			"\t\t# <handle pattern2>\n\t\t...",
			"\tcase {'a': a, **rest} as d if not rest # guard",
			"\t\t# <handle pattern3>\n\t\t...",
			"\tcase {'greeting': 'hello' | 'hi' | 'howdy', 'name': ({'first_name': name} | {'name': name})}: # or",
			"\t\t# <handle pattern4>\n\t\t...",
			"\tcase [_, _, *rest] if sum(rest) > 10: # list deconstructing",
			"\t\t# <handle pattern5>\n\t\t...",
			"\tcase {'a': 1, **rest} as d if not rest: # dict deconstructing",
			"\t\t# <handle pattern6>\n\t\t...",
			"\tcase T(name=name, product=product): # Class",
			"\t\t# <handle pattern7>\n\t\t...",
			"\tcase _:",
			"\t\traise NotImplementedError",
			"\t#case <patternN> as <boundVar> [<if guard>]:",
			"\t\t# <handle patternN>",
		],
		"description": "Python, structural pattern matching"
	},

	"python-tp": {
		"prefix": "py-TypeCustom",
		"body": [
			"${1:P} = typing.ParamSpec('$1')",
			"${2:T} = typing.TypeVar('$2')\n",
		],
		"description": "function args, kwargs Type custom"
	},

	"python-stringtemplate": {
		"prefix": "py-Stringtemplate",
		"body": [
			"class MyStringTemplate(string.Template):",
			"\t# python implements string replace with regex (Java string.replace)",
			"\tdelimiter = '${1:%}'",
			"\tidpattern = '[a-z]+_[a-z]+'",
			"\tbraceidpattern = '{}'",
			"\tflags = re.IGNORECASE | re.VERBOSE | re.UNICODE\n",
			"txt = 'Delimiter   : $1$1; Replaced    : $1with_underscore; Ignored     : $1notunderscored'",
			"d = {",
			"\t'with_underscore': 'replaced',",
			"\t'notunderscored': 'not replaced',",
			"}",
			"t = MyStringTemplate(txt)",
			"t.safe_substitute(d)\n",
		],
		"description": "stdlib, string template, Java string.replace / pandas.str.replace"
	},

	"python-textwrap": {
		"prefix": "py-Textwrap",
		"body": [
			"sample_text = 'The textwrap module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors.'",
			"dedent_text = textwrap.dedent(sample_text).strip()",
			"for width in [45, 60]:",
			"\tprint('{} Columns:'.format(width))",
			"\tshortened = textwrap.shorten(dedent_text, width)",
			"\twrapped = textwrap.fill(shortened, width=width)",
			"\tfinal = textwrap.indent(wrapped, '> ')",
			"\tprint(final)",
			"\tprint()\n",
		],
		"description": "stdlib, textwrap(...)"
	},

	"python-regex": {
		"prefix": "py-Regex",
		"body": [
			"#SWD: escapes\\s \\S, \\w \\W, \\d, \\D",
			"#anchors: abz^$",
			"#flgs: aimsx = re.ASCII | re.IGNORECASE | re.DOTALL | re.MULTILINE | re.VERBOSE",
			"#namedgroup = r'?P<name>pattern'",
			"#noncapture = r'?:pattern'",
			"#positiveLookahead = '(?=pattern)'",
			"#negativeLookahead = '(?!pattern)'",
			"#positiveLookbehind = '(?<=pattern)'",
			"#negativeLookbehind = '(?<!pattern)'",
			"#selfReference = r'pattern,...,pattern,...,\\1,...,\\i'\n",
		],
		"description": "stdlib, regex expr reference"
	},

	"python-generate-random-image": {
		"prefix": "py-generateRandomImage",
		"body": [
			"from PIL import Image",
			"from io import BytesIO",
			"from django.core.files import File\n",
			"def generate_random_image(width: int=600, height: int=480) -> File:",
			"\timage = Image.new('RGB', (width, height), 'white')",
			"\twith random_state(42):",
			"\t\tpixels = [(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) for _ in range(width * height)]",
			"\t\timage.putdata(pixels)",
			"\t\timage_io = BytesIO()",
			"\t\timage.save(image_io, format='PNG')",
			"\t\timage_io.seek(0)",
			"\t\treturn File(image_io, name='random_image.png')\n",
		],
		"description": "PIL, generate random RBG image"
	},

	"python-regex-pattern": {
		"prefix": "py-regex-pattern",
		"body": [
			"${1:anchor}${2:what}${3:repitition}${4:anchor}"
		],
		"description": "stdlib, regex expr, pattern template"
	},

	"python-diff": {
		"prefix": "py-Diff",
		"body": [
			"d = difflib.Differ()",
			"diff = d.compare(${1:text1_lines}, ${2:text2_lines})",
			"print('\\n'.join(list(diff)))",
			"d = difflib.unified_diff($1, $2, lineterm='')",
			"d = difflib.context_diff($1, $2)",
			"print('\\n'.join(list(d)))\n",
		],
		"description": "stdlib, difflib.Differ(...)"
	},

	"python-enum" : {
		"prefix": "py-Enum",
		"body": [
			"class RegularEnum(enum.Enum):",
			"\tpass\n",
			"class BugStatus(enum.IntEnum):",
			"\tnew = 7",
			"\tincomplete = 6",
			"\tinvalid = 5",
			"\twont_fix = 4",
			"\tin_progress = 3",
			"\tfix_committed = 2",
			"\tfix_released = 1",
			"\t# error",
			"\tby_design = 4",
			"\tclosed = 1\n",
			"@enum.unique",
			"class UniqueEnum(enum.Enum):",
			"\tpass\n",
			"sorted(BugStatus)",
		],
		"description": "stdlib, enum reference"
	},

	"python-bugenum": {
		"prefix": "py-BugEnum",
		"body": [
			"class BugStatusX(enum.Enum):",
			"\tnew = {",
			"\t\t'num': 7,",
			"\t\t'transitions': ['incomplete','invalid','wont_fix','in_progress',],        ",
			"\t}",
			"\tincomplete = {",
			"\t\t'num': 6,",
			"\t\t'transitions': ['new', 'wont_fix'],",
			"\t}",
			"\tinvalid = {",
			"\t\t'num': 5,",
			"\t\t'transitions': ['new'],",
			"\t}",
			"\twont_fix = {",
			"\t\t'num': 4,",
			"\t\t'transitions': ['new'],",
			"\t}",
			"\tin_progress = {",
			"\t\t'num': 3,",
			"\t\t'transitions': ['new', 'fix_committed'],",
			"\t}",
			"\tfix_committed = {",
			"\t\t'num': 2,",
			"\t\t'transitions': ['in_progress', 'fix_released'],",
			"\t}",
			"\tfix_released = {",
			"\t\t'num': 1,",
			"\t\t'transitions': ['new'],",
			"\t}",
			"\tdef __init__(self, vals):",
			"\t\tself.num = vals['num']",
			"\t\tself.transitions = vals['transitions']",
			"\tdef can_transition(self, new_state):",
			"\t\treturn new_state.name in self.transitions\n",
			"print('Name:', BugStatusX.in_progress)",
			"print('Value:', BugStatusX.in_progress.value)",
			"print('Custom attribute:', BugStatusX.in_progress.transitions)",
			"print('Using attribute:',",
			"BugStatusX.in_progress.can_transition(BugStatusX.new))",
		],
		"description": "stdlib, complex enum with __init__(...)"
	},

	"python-chainmap": {
		"prefix": "py-Chainmap",
		"body": [
			"m = collections.ChainMap(${1:dict1}, ${2:dict2})",
		],
		"description": "stdlib, collections.ChainMap"
	},

	"python-decorator-FBD-vdi": {
		"prefix": "py-fbd-Vdi",
		"body": [
			"def valid_data(*args: P.args, **kwargs: P.kwargs) -> bool:",
			"\tpass$0\n",
			"def validate_input(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t# validate here",
			"\t\tif valid_data(*args, **kwargs):",
			"\t\t\treturn func(*args, **kwargs)",
			"\t\telse:",
			"\t\t\tValueError('Invalid data. Please check your inputs')",
			"\treturn wrapped\n",
		],
		"description": "validate input"
	},

	"python-decorator-FBD-vdo": {
		"prefix": "py-fbd-Vdo",
		"body": [
			"def valid_output(*args: P.args, **kwargs: P.kwargs) -> bool:",
			"\tpass$0\n",
			"def validate_output(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tresult = func(*args, **kwargs)",
			"\t\tif valid_output(result):",
			"\t\t\treturn result",
			"\t\telse:",
			"\t\t\traise ValueError('Invalid output: Please check your function logic')",
			"\treturn wrapped\n",
		],
		"description": "validate output"
	},

	"python-decorator-FBD-suppress-error": {
		"prefix": "py-fbd-SuppressError",
		"body": [
			"def suppress_errors(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\ttry:",
			"\t\t\treturn func(*args, **kwargs)",
			"\t\texcept Exception as e:",
			"\t\t\tprint(f'Error in {func.__name__}: {e}')",
			"\t\t\treturn",
			"\treturn wrapped\n",
		],
		"description": "suppress errors"
	},

	"python-decorator-FBD-retry": {
		"prefix": "py-fbd-Retry",
		"body": [
			"def retry(max_attemps: int, delay: int) -> typing.Callable[P,T]:",
			"\tdef decorator(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\t\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\t\tattempts = 0",
			"\t\t\twhile attempts < max_attemps:",
			"\t\t\t\ttry:",
			"\t\t\t\t\treturn func(*args, **kwargs)",
			"\t\t\t\texcept Exception as e:",
			"\t\t\t\t\tprint(f'Attempt {attempts + 1} failed. Retrying in {delay} seconds')",
			"\t\t\t\t\tattempts += 1",
			"\t\t\t\t\ttime.sleep(delay)",
			"\t\t\traise Exception('Max retry attempts exceeded.')",
			"\t\treturn wrapped",
			"\treturn decorator\n",
		],
		"description": "retry x time after n seconds delay"
	},

	"python-decorator-FBD-debug": {
		"prefix": "py-fbd-Debug",
		"body": [
			"def debug(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tprint(f'Debugging {func.__name__} - args: {args}, kwargs: {kwargs}')",
			"\t\treturn func(*args, **kwargs)",
			"\treturn wrapped\n",
		],
		"description": "debug functions"
	},

	"python-decorator-FBD-viz": {
		"prefix": "py-fbd-Viz",
		"body": [
			"def visualize_result(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tresult = func(*args, **kwargs)",
			"\t\t# your visualization code here",
			"\t\tplt.show()",
			"\t\treturn result",
			"\treturn wrapped\n",
		],
		"description": "visualise the result of function"
	},

	"python-decorator-FBD-log-result": {
		"prefix": "py-fbd-LogResult",
		"body": [
			"def log_results(func: typing.Callable[P,T]) -> typing.Callable[P,T]:",
			"\tdef wrapped(*args: P.args, **kwargs: P.kwargs) -> T:",
			"\t\tresult = func(*args, **kwargs)",
			"\t\twith open('results.log', 'a') as log_file:",
			"\t\t\tlog_file.write(f'{func.__name__} - Result: {result}\\n')",
			"\t\treturn result ",
			"\treturn wrapped\n",
		],
		"description": "log function and return value(s) to a file in the current diretory"
	},

	"python-decorator-FBD-classmethod": {
		"prefix": "py-fbd-Classmethod",
		"body": [
			"@classmethod",
			"def ${1:method_name}(cls, ${2:args}) -> ${3:T}:",
			"\traise NotImplementedError$0"
		],
		"description": "class method"
	},

	"npm": {
		"prefix": "npm",
		"body": [
			"import numpy as np",
			"import ${1|pandas,polars|} as ${2|pd,pl|}",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
			// "import skimpy",
			"plt.style.use('${3|ggplot,classic,default|}')",
			// "np.__version__, pd.__version__, sns.__version__, np.show_config(), pd.show_versions()",
			"$0",
		],
		"description": "NumPy Pandas Polars Matplotlib (Seaborn, skimpy) big-3"
	},

	"pd-DataFrame": {
		"prefix": "pdf",
		"body": [
			"pd.DataFrame(",
			"\tdata=$1,",
			"\tcolumns=${2:None},",
			"\tindex=${3:None},",
			")",
		],
		"description": "Pandas, pd.DataFrame"
	},

	"pd-Series": {
		"prefix": "pds",
		"body": [
			"pd.Series(",
			"\tdata=${1:[]},",
			"\tindex=${2:None},",
			"\tname=${3:None},",
			"\tdtype=${4:np.int16},",
			")",
		],
		"description": "Pandas, pd.Series"
	},

	"pd-Index": {
		"prefix": "pdi",
		"body": [
			"pd.Index(",
			"\tdata=${1:[]},",
			"\tname=${2:None},",
			"\tdtype='$3',",
			")",
		],
		"description": "Pandas, pd.Index(...)"
	},

	"pd-RangeIndex": {
		"prefix": "pd-ri",
		"body": [
			"pd.RangeIndex(start=${1:0}, stop=${2:5}, step=${3:1})",
		],
		"description": "Pandas, pd.RangeIndex(...)"
	},

	"pd-MultiIndex": {
		"prefix": "pd-multiIndex",
		"body": [
			"pd.MultiIndex(",
			"\tlevels=[${1:[]}, ${2:[]}],",
			"\tcodes=[${3:[]}, ${4:[]}],",
			"\tnames=${5:None},",
			"\tdtype=${6:None},",
			")",
		],
		"description": "Pandas, pd.MultiIndex(...)"
	},

	"pd-MultiIndex-fromXXX": {
		"prefix": "pd-multiIndexFrom",
		"body": [
			"pd.MultiIndex.from_${1:arrays}(",
			"\t$2,",
			"\tnames=${3:None},",
			")",
		],
		"description": "Pandas, pd.MultiIndex_fromXXX; (options=arrays, tuples, product, frame)"
	},

	"pd-generate-dataframe": {
		"prefix": "pd-genDataFrame",
		"body": [
			"def generate_dataframe(n: int) -> pd.DataFrame:",
			"return pd.DataFrame(",
			"\tdata={",
			"\t\t'a' : np.random.randint(-10, 10_0, n),",
			"\t\t'b' : np.random.randn(n),",
			"\t\t'c' : np.random.choice(['red', 'green', 'blue'], n),",
			"\t\t'd' : np.random.choice(pd.date_range(start='2030-08-01', end='2030-08-31', freq='d'), n),",
			"\t},",
			"\tcolumns=None,",
			"\tindex=None,",
			")",
		],
		"description": "Pandas, generate_dataframe()"
	},

	"pd-cs": {
		"prefix": "pd-cs",
		"body": [
			"#🚀c: pd.merge(...), pd.join(...), pd.concat([...]), pd.combine(...)",
			"#🌌s: pd.cut(...), pd.qcut(...), pd.iloc[...], pd.loc[...]",
		],
		"description": "Pandas, concatenate and split"
	},

	"pd-offsets": {
		"prefix": "pd-offsets",
		"body": [
			"from pandas.tseries import offsets",
			"offset = offsets.MonthEnd($0)",
		],
		"description": "Pandas, pd.tseries.offsets"
	},

	"pd-dr": {
		"prefix": "pd-dr",
		"body": [
			"pd.date_range(start='${1:2050-01-01}', periods=${2:5}, freq='${3:D}').tz_localize('${4:Asia/Shanghai}')"
		],
		"description": "Pandas, pd.date_range(...).tz_localize(...)"
	},

	"pd-bdr": {
		"prefix": "pd-bdr",
		"body": [
			"pd.bdate_range(start='${1:2050-01-01}', periods=${2:5}, freq='${3:D}').tz_localize('${4:Asia/Shanghai}')"
		],
		"description": "Pandas, pd.bdate_range(...).tz_localize(...)"
	},

	"pd-pr": {
		"prefix": "pd-pr",
		"body": [
			"pd.period_range(start='${1:2050-01-01}', periods=${2:1}, freq='${3:D}')",
			// "# ts.asfreq(...)",
			// "# ts.to_xxx(...)$0",
		],
		"description": "Pandas, pd.period_range(...)"
	},

	"pd-ir": {
		"prefix": "pd-ir",
		"body": [
			"pd.interval_range(start=${1:pd.Timestamp('2050-01-01')}, periods=${2:3}, freq='${3:T}')",
		],
		"description": "Pandas, pd.interval_range(...)"
	},

	"pd-tr": {
		"prefix": "pd-tr",
		"body": [
			"pd.timedelta_range(start='${1:1 day}', periods=${2:3}, freq='${3:4H}')"
		],
		"description": "Pandas, pd.timedelta_range(...)"
	},

	"pd-tsfp": {
		"prefix": "pd-tsfp",
		"body": [
			"#🚀freq pattern: [B]xxx[S]<-[i]yyy> (`xxx` is super group of `yyy`) -> Y Q M W D H T S ms",
			"#🌌freq convertion: asfreq(...), to_XXX",
		],
		"description": "Pandas, pd.date_range(...) freq pattern"
	},

	"pd-ohlc": {
		"prefix": "pd-ohlc",
		"body": [
			"resample('${1:5min}').ohlc()",
		],
		"description": "Pandas, pd.resample(...).ohlc()"
	},

	"pd-rol": {
		"prefix": "pd-rol",
		"body": [
			"rolling(window=${1:2}, min_periods=${2:1}, center=${3:False}, step=${4:1}, method='single').${5:apply}(${6:np.sum})",
		],
		"description": "Pandas, window functions rolling(...).sum()"
	},

	"pd-exp": {
		"prefix": "pd-exp",
		"body": [
			"expanding(min_periods=${1:2}, axis=${2:0}, method='single').${3:apply}(${4:np.sum})",
		],
		"description": "Pandas, window functions expanding(...).sum()"
	},

	"pd-ewm": {
		"prefix": "pd-ewm",
		"body": [
			"ewm(com=${1:.5}, ignore_na=${2:False}).${3:mean}()",
		],
		"description": "Pandas, window functions ewm(...).mean()"
	},

	"pd-sac": {
		"prefix": "pd-sac",
		"body": [
			"df.groupby([$1,$2]) # split - apply - combine",
		],
		"description": "Pandas, GroupBy concept"
	},

	"pd-agg": {
		"prefix": "pd-agg",
		"body": [
			".agg({",
			"\t'${1:col1}' : [",
			"\t\t('$1_max', 'max'),",
			"\t\t('$1_min', 'min'),",
			"\t\t('$1_count', np.count_nonzero),",
			"\t\t('$1_mean', 'mean'),",
			"\t\t('$1_sum', 'sum'),",
			"\t\t('$1_var', 'var'),",
			"\t\t('$1_std', 'std'),",
			// "\t\t('$1_prod', np.cumprod),",
			// "\t\t('$1_first', np.first),",
			// "\t\t('$1_last', np.last),",
			"\t],",
			"})",
		],
		"description": "Pandas, pd.groupby(...).agg(...)"
	},

	"pd-cat": {
		"prefix": "pd-cat",
		"body": [
			"cat: pd.Categorical = pd.Categorical.from_codes(codes=${1:[]}, categories=${2:[]}, ordered=${3:True})",
		],
		"description": "Pandas, pd.Categorical(...)"
	},

	"pd-nm": {
		"prefix": "pd-nm",
		"body": [
			"def normalize(s: pd.Series) -> pd.Series:",
			"\treturn (s - s.mean()) / s.std()\n",
			"def min_max_scaling(s: pd.Series) ->  pd.Series:",
			"\treturn (s - s.min()) / (s.max() - s.min())",
		],
		"description": "Pandas, normalize Pandas Series"
	},

	"pd-info": {
		"prefix": "pd-info",
		"body": [
			"df.info().T",
			"df.isnull().sum()",
		],
		"description": "Pandas, basic info and check null"
	},

	"np-ra": {
		"prefix": "np-ra",
		"body": [
			"np.arange(${1:5})",
		],
		"description": "NumPy, np.arange(...)"
	},

	"np-ar": {
		"prefix": "np-ar",
		"body": [
			"np.array(${1:[]})",
		],
		"description": "NumPy, np.array(...)"
	},

	"np-rc": {
		"prefix": "np-rc",
		"body": [
			"np.random.choice(${1:[]}, ${2:5})",
		],
		"description": "NumPy, np.random.choice(...)"
	},

	"np-rs": {
		"prefix": "np-rs",
		"body": [
			"np.random.seed(${1:0})",
		],
		"description": "NumPy, np.random.seed(...)"
	},

	"np-rr": {
		"prefix": "np-rr",
		"body": [
			"np.random.randn(${1:5})",
		],
		"description": "NumPy, np.random.randn(...)"
	},

	"np-ri": {
		"prefix": "np-ri",
		"body": [
			"np.random.randint(low=${1:1}, high=${2:5}, size=${3:5})",
		],
		"description": "NumPy, np.random.randint(...)"
	},

	"np-random-dist": {
		"prefix": "np-random-dist",
		"body": [
			"np.random.${1|uniform,binomial,gamma|}(${2:1}, ${3:5}, ${4:5})",
		],
		"description": "NumPy, np.random dist"
	},

	"np-cs": {
		"prefix": "np-cs",
		"body": [
			"#c: np.concatenate(...), np.XXXstack(...), np.r_[...], np.c_[...]",
			"#s: np.XXXsplit(...)",
		],
		"description": "NumPy, concatenation and split"
	},

	"np-re": {
		"prefix": "np-re",
		"body": [
			"#repeat: np.repeat(...) -> element-wise repeat n times",
			"#tile: np.tile([...]) -> value block tiling n times",
		],
		"description": "NumPy, np.repeat(...), np.tile(...)"
	},

	"np-tp": {
		"prefix": "np-tp",
		"body": [
			"#np.take(...), np.put(...) -> boardcasting",
		],
		"description": "NumPy, np.take(...), np.put(...) on single axis only"
	},

	"np-li": {
		"prefix": "np-li",
		"body": [
			"np.linalg.${1:det}($2)$0",
		],
		"description": "NumPy, np.linalg.XXX(...)"
	},

	"np-las": {
		"prefix": "np-las",
		"body": [
			"np.linalg.solve(",
			"\tnp.array([",
			"\t\t${1:[]},",
			"\t\t${2:[]}",
			"\t]),",
			"\tnp.array(${3:[]})",
			")",
		],
		"description": "NumPy, np.linalg.solve(...)"
	},

	"np-rref": {
		"prefix": "np-rref",
		"body": [
			"rref, pivot_columns = np.linalg.qr(${1:M}, mode='r')"
		],
		"description": "NumPy, np.qr(...)"
	},

	"np-linearly-independent": {
		"prefix": "np-linind",
		"body": [
			"def is_linearly_independent(v: list[list[int]]) -> bool:",
			"\tmatrix = np.array(v)",
			"\trank = np.linalg.matrix_rank(matrix)",
			"\treturn rank == len(v)",
		],
		"description": "NumPy, np.linalg.matrix_rank(...)"
	},

	"mpl-font": {
		"prefix": "mpl-font",
		"body": [
			"plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']",
			"plt.rcParams['axes.unicode_minus'] = False",
		],
		"description": "matplotlib, font configuration"
	},

	"mpl-fig": {
		"prefix": "mpl-fig",
		"body": [
			"fig = plt.figure(${1:figsize=(8,8)})",
			"ax${2:1} = fig.add_subplot(${3:2}, $3, $2)",
			"$0",
		],
		"description": "matplotlib, create matplotlib figure, and add_subplot(...)"
	},

	"mpl-attr": {
		"prefix": "mpl-attr",
		"body": [
			"ax.axis([${1:x_lower_limit}, ${2:x_upper_limit}, ${3:y_lower_limit}, ${4:y_upper_limit}])",
			"ax.set_title(fr'$ $5 $')",
			"ax.set_xlabel('$6')",
			"ax.set_ylabel('$7')",
			"ax.legend()",
		],
		"description": "matplotlib, set attributes of Axes"
	},

	"mpl-linesegment": {
		"prefix": "mpl-linesegment",
		"body": [
			"ax.plot([${1:p1_x},${2:p2_x}],[${3:p1_y},${4:p2_y}], 'g--')",
		],
		"description": "matplotlib, plot a line segment used in prediction"
	},

	"mpl-point": {
		"prefix": "mpl-point",
		"body": [
			"ax.plot(${1:x},${2:y}, 'ro')",
		],
		"description": "matplotlib, plot a point"
	},

	"mpl-abline": {
		"prefix": "mpl-abline",
		"body": [
			"ax.ax${1|h,v|}line(${2:5}, linestyle='--', color='b')$0"
		],
		"description": "matplotlib, add support line to figure"
	},

	"mpl-sub": {
		"prefix": "mpl-sub",
		"body": [
			"ax${1:1} = fig.add_subplot(${2:2}, $2, $1)",
			"$0",
		],
		"description": "Matplotlib.figure.add_subplot(...)"
	},

	"mpl-fc": {
		"prefix": "mpl-fc",
		"body": [
			"font_options: dict[str, str|int] = {'family':'monospace', 'weight':'light', 'size':8}",
			"plt.rc('font', **font_options)",
		],
		"description": "matplotlib, global settings to font"
	},

	"mpl-fap": {
		"prefix": "mpl-fap",
		"body": [
			"fig, ax = plt.subplots(figsize=(${1:${2:2}, $2}),dpi=${3:80})",
		],
		"description": "matplotlib, matplotlib.pylot.subplots(...)"
	},

	"mpl-pltLine2d": {
		"prefix": "mpl-pltLine2d",
		"body": [
			"plt.plot(data=${1:0}, ${2:fmt}, ${3:line2D}) # fmt='[mark][line][color]'",
		],
		"description": "matplotlib, matplotlib.pyplot.plot(...) line2D"
	},

	"mpl-tickparams": {
		"prefix": "mpl-tickParams",
		"body": [
			"ax.set_xticks(np.linspace(0, 10, 50), minor=True)",
			"ax.tick_params(axis='${1:x}', which='${2:minor}', length=2, color='${3:r}', labelrotation=${4:45})",
		],
		"description": "matplotlib, customize matplotlib.pyplot.xticklable(...), or fig.autofmt_xdate(...) may work"
	},

	"mpl-ra": {
		"prefix": "mpl-ra",
		"body": [
			"plt.gca().$0invert_${1:x}axis()",
		],
		"description": "matplotlib, reverse matplotlib.pyplot.axis"
	},

	"mpl-sa": {
		"prefix": "mpl-sa",
		"body": [
			"fig.subplots_adjust(wspace=${1:.3}, hspace=${2:.2})",
		],
		"description": "matplotlib, adjust matplotlib.subplots(...) spaces"
	},

	"mpl-annotate": {
		"prefix": "mpl-annotate",
		"body": [
			"ax.annotate(",
			"\ttext=${1:'annotation'},",
			"\txy=(${2:x}, ${3:y}),",
			"\txytext=(${4:xtext}, ${5:ytext}),",
			"\tarrowprops=dict(facecolor='black', shrink=.1),",
			"\thorizontalalignment='left',",
			"\tverticalalignment='bottom',",
			")",
		],
		"description": "matplotlib, matplotlib.plt.annotate(...)"
	},

	"mpl-saveFig": {
		"prefix": "mpl-saveFig",
		"body": [
			"from pathlib import Path\n",
			"IMAGES_PATH = Path() / '${1:to}' / '${2:store}'",
			"IMAGES_PATH.mkdir(parents=True, exist_ok=True)",
			"def save_fig(fig_id, tight_layout=True, fig_extension='png', resolution=300) -> None:",
			"\tpath = IMAGES_PATH / f'{fig_id}.{fig_extension}'",
			"\tif tight_layout: plt.tight_layout()",
			"\tplt.savefig(path, format=fig_extension, dpi=resolution)",
		],
		"description": "matplotlib, save plots to local storage"
	},

	"mpl-3d": {
		"prefix": "mpl-3d",
		"body": [
			"from mpl_toolkits.mplot3d import axes3d",
			"import matplotlib.pyplot as plt\n",
			"ax = plt.figure().add_subplot(projection='3d')",
			"X, Y, Z = axes3d.get_test_data(0.05)",
			// "# Plot the 3D surface",
			"ax.plot_surface(X, Y, Z, edgecolor='royalblue', lw=0.5, rstride=8, cstride=8, alpha=0.3)",
			// "# Plot projections of the contours for each dimension.  By choosing offsets",
			// "# that match the appropriate axes limits, the projected contours will sit on",
			// "# the 'walls' of the graph",
			"ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap='coolwarm')",
			"ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap='coolwarm')",
			"ax.contourf(X, Y, Z, zdir='y', offset=40, cmap='coolwarm')",
			"ax.set(xlim=(-40, 40), ylim=(-40, 40)im=(-100, 100), xlabel='X', ylabel='Y'abel='Z')",
		],
		"description": "matplotlib, matplotlib.mplot3d(...)"
	},

	"sns-fg": {
		"prefix": "sns-fg",
		"body": [
			"g = sns.FacetGrid(${1:df}, col=${2:'col_name'})",
			"g.map_dataframe(${3:sns.scatterplot}, x=${4:'x'}, y=${5:'y'})",
			"g.set_axis_lables($4, $5)",
			"g.add_legend()",
			"$0",
		],
		"description": "seaborn, create seaborn.FacetGrid(...) template"
	},

	"sns-color": {
		"prefix": "sns-color",
		"body": [
			"sns.color_palette('${1|tab10,hls,husl,Set2,Paired,rocket,mako,flare,crest,magma,viridis,cubehelix|}'$0)",
		],
		"description": "seaborn, change color palette"
	},

	"sns-subaxis": {
		"prefix": "sns-subaxis",
		"body": [
			"ax1 = fig.add_subplot()",
			"$1",
			"ax2 = ax1.twinx()",
			"$2",
		],
		"description": "seaborn, subaxis"
	},

	"sns-label": {
		"prefix": "sns-label",
		"body": [
			"for i in range(len(${1:df})):",
			"\tplt.plot($1['${2:x}'][i], $1['${3:y}'][i], 'ro')",
			"\tplt.text(",
			"\t\t$1['$2'][i], $1['$3'][i], $1['$3'][i],",
			"\t\thorizontalalignment='left',",
			"\t\tsize='medium',",
			"\t\tcolor='blue'",
			"\t)",
		],
		"description": "seaborn, data label"
	},

	"sns-cp" : {
		"prefix": "sns-cp",
		"body": [
			"palette: list[str] = ['#F72585', '#7209B7', '#3A0CA3', '#4361EE', '#4CC9F0']",
			"sns.set_palette(palette=palette)",
		],
		"description": "seaborn, set up Seaborn.color_palette(...)"
	},

	"sns-kwargs": {
		"prefix": "sns-kwargs",
		"body": [
			"color=${1:None},",
			"linewidth=${2:1},",
			"linestyle=${3:'solid'},",
			"marker=${4:'--'},",
			"markersize=${5:6},",
			"label=${6:None},",
			"alpha=${7:1},",
			"hue=${8:None},",
			"style=${9:None},",
			"size=${10:None},",
			"palette=${11:None},",
			"legend=${12:True},",
			"xlabel=${13:None},",
			"ylabel=${14:None},",
			"title=${15:None},",
			"xlim=${16:None},",
			"ylin=${17:None},",
			"grid=${18:False},",
		],
		"description": "seaborn, sns.xxxplot(..., *, **kwargs), kwargs"
	},

	"sns-pg": {
		"prefix": "sns-pg",
		"body": [
			"g = sns.PairGrid(${1:df}, hue=${2:'col_name'})",
			// "g.map_offdiag(${2:sns.scatterplot})",
			"g.map_diag(${4:sns.histplot})",
			"g.map_upper(${3:sns.kdeplot})",
			"g.map_lower(${5:sns.scatterplot})",
			"g.add_legend()",
			"$0",
		],
		"description": "seaborn, sns.PairGrid(...) template"
	},

	"sns-jg": {
		"prefix": "sns-jg",
		"body": [
			"g = sns.JointGrid()",
			"x='${2:x}'; y='${3:y}'; hue=${4:None}",
			// "g.plot(${4:sns.scatterplot}, ${5:sns.histplot})",
			// "g.plot_joint(${4:sns.regplot})",
			// "g.plot_marginals(${5:sns.kdeplot})",
			"sns.regplot(${1:df}, x=x, y=y, hue=hue, ax=g.ax_joint)",
			"sns.kdeplot($1, x=x, y=y, hue=hue, ax=g.ax_marg_x)",
			"sns.histplot($1, y=y, hue=hue, ax=g.ax_marg_y)",
			"g.refline(x=${4:10}, y=${5:10})",
			"$0",
		],
		"description": "seaborn, sns.JointGrid(...) template"
	},

	"sns-cat": {
		"prefix": "sns-cat",
		"body": [
			"sns.catplot(${1:df}, x=${2:'x'}, y=${3:'y'}, kind='kde')",
		],
		"description": "seaborn, sns.catplot(...)"
	},

	"sm-sc": {
		"prefix": "sm-sc",
		"body": [
			"import statsmodels.api as sm",
			"import statsmodels.formula.api as smf",
			"import scipy.special as sc",
			// "from sklearn import linear_model",
			// "from sklearn.preprocessing import PolynomialFeatures",
			// "from sklearn.pipeline import Pipeline",
		],
		"description": "statsmodels, scipy, big3"
	},

	"sm-ols": {
		"prefix": "sm-ols",
		"body": [
			"coef, resid, _, _ = np.linalg.lstsq(X, y)",
			"smf.ols('${1:Lottery} ~ ${2:Literacy} + np.log(${3:Pop1831})', data=${4:data}).fit()",
		],
		"description": "statsmodels OLS fit"
	},

	"skl-how-to-read-doc": {
		"prefix": "skl-dco",
		"body": [
			"# ACU, GE",
			"# A: API",
			"# C: Class documentation",
			"# U: User guide",
			"# G: Glossary",
			"# E: Examples",
		],
		"description": "scikit-learn, how to read the scikit-learn documentation"
	},

	"skl-setconfig": {
		"prefix": "skl-setconfig",
		"body": [
			"sklearn.set_config(display='diagram')",
		],
		"description": "scikit-learn, display estimators and pipeline interactively"
	},

	"skl-split": {
		"prefix": "skl-split",
		"body": [
			"X_train, X_test, y_train, y_test = model_selection.train_test_split(${1:X}, ${2:y}, test_size=${3:.2}, random_state=${4:0})",
			// "for Model in [GaussianNB, KNeighborsClassifier, LinearSVC]:",
			// "\tclf = Model().fit(X_train, y_train)",
			// "\ty_pred = clf.predict(X_test)",
			// "\tprint('%s : %s ' % (Model.__name__, metrics.f1_score(y_test, y_pred, average='macro')))",
		],
		"description": "scikit-learn, sklearn.model_selection.train_test_split(...)"
	},

	"skl-ct": {
		"prefix": "skl-ct",
		"body": [
			"ohe = preprocessing.${1:OneHotEncoder}(handle_unknown='ignore')",
			"imp = impute.SimpleImputer(strategy='${2:median}', add_indicator=${3:False})",
			"ct = compose.ColumnTransformer(",
			"\ttransformers=[",
			"\t\t('encoder', ohe, ['${4:colName1}', '${5:colName2}']),",
			"\t\t('imputer', imp, ['${6:colName3}']),",
			"\t],",
			"\tremainder='passthrough'",
			")",
			"ct.fit_transform(${7:X_train})",
		],
		"description": "scikit-learn, make_column_transform(...)"
	},

	"skl-ctpmake": {
		"prefix": "skl-ctpmake",
		"body": [
			"ct = compose.make_column_transformer(",
			"\t(ohe, ['${1:colName1}', '${2:colName2}']),",
			"\t(imp, ['${3:colName3}']),",
			"\tremainder='passthrough'",
			")",
			"pipe = pipeline.make_pipeline(",
			"\tct,",
			"\tneighbors.KNeighborsRegressor(),",
			")",
			"pipe.named_steps",
		],
		"description": "scikit-learn, make_column_transformer(...), make_pipeline(...), functional syntax"
	},

	"skl-fps": {
		"prefix": "skl-fps",
		"body": [
			"X_train, X_test, y_train, y_test = model_selection.train_test_split(${1:X}, ${2:y}, test_size=.2, random_state=0)",
			"pipe = pipeline.Pipeline([",
			"\t('scale', ${3:preprocessing.StandardScaler()}),",
			"\t('model', ${4:neighbors.KNeighborsRegressor()}),",
			"])",
			"mod = model_selection.GridSearchCV(",
			"\testimator=pipe,",
			"\tparam_grid = {'model__threshold': ${5:np.linspace(0.1, 0.9, 50)}},",
			"\tscoring={",
			"\t\t'precision': metrics.make_scorer(metrics.precision_score),",
			"\t\t'recall': metrics.make_scorer(metrics.recall_score),",
			"\t\t'accuracy': metrics.make_scorer(metrics.accuracy_score)",
			"\t},",
			"\trefit='${6:precision}',",
			"\tcv=${7:5},",
			"\tn_jobs=-1",
			")",
			"mod.fit(X_train, y_train)",
			"y_pred = mod.predict(X_test)",
			"#plot predict vs y_test here",
		],
		"description": "scikit-learn, split dataset, Pipeline model, GrideSearch the best parameters and cross-validation, then fit and predict"
	},

	"skl-rscv": {
		"prefix": "skl-rscv",
		"body": [
			"rng = np.random.default_rng()",
			"params = {",
			"\t",
			"}",
			"rand = model_selection.RandomizedSearchCV(",
			"\t${1:pipe},",
			"\tparams,",
			"\tn_iter=${2:10},",
			"\tcv=5,",
			"\tscoring='accuracy',",
			"\trandom_state=rng",
			")",
		],
		"description": "scikit-learn, model_selection.RandomizedSearchCV(...)"
	},

	"skl-cv": {
		"prefix": "skl-cv",
		"body": [
			"cv = model_selection.ShuffleSplit(n_splits=5)",
			"model_selection.cross_val_score(${1:clf}, X, y, cv=cv)",
		],
		"description": "sklearn.model_selection.cross_val_score(...) model"
	},

	"skl-cvpipe": {
		"prefix": "skl-cvpipe",
		"body": [
			"model_selection.cross_val_score(${1:pipe}, X, y, cv=${2:5}, scoring='${3:accuracy}').mean()",
		],
		"description": "scikit-learn, model_selection.cross_val_score(...) cross-validate entire Pipeline"
	},

	"skl-hocv": {
		"prefix": "skl-hoxv",
		"body": [
			"for Model in [Ridge, Lasso]:",
			"\tmodel = Model()",
			"\tprint('%s : %s ' % (Model.__name__, model_selection.cross_val_score(model, X, y).mean()))",
		],
		"description": "scikit-learn, Hyperparameter optimization + sklearn.model_selection.cross_val_score(...)"
	},

	"skl-hscv": {
		"prefix": "skl-hscv",
		"body": [
			"alphas = ${1:np.linspace(-3, -1, 30)}",
			"for Model in [Ridge, Lasso]: # auto Hyperparameter Grid Search",
			"\tgscv = model_selection.GridSearchCV(Model(), dict(alpha=alphas), cv=3).fit(X, y)",
			"\tprint('%s : %s ' % (Model.__name__, gscv.best_params_))\n",
			"for Model in [RidgeCV, LassoCV]: # Hyperparameter cross-validation",
			"\tmodel = Model(alphas=alphas, cv=3).fit(X, y)",
			"\tprint('%s : %s ' % (Model.__name__, model.alpha_))\n",
			"for Model in [RidgeCV, LassoCV]: #🧣nested cross-validation",
			"\tscores = model_selection.cross_val_score(Model(alphas=alphas, cv=3), X, y, cv=3)",
			"\tprint(Model.__name__, np.mean(scores))",
		],
		"description": "scikit-learn, Hyperparameter Grid Search and cross-validation"
	},

	"skl-viztSNE": {
		"prefix": "skl-viztSNE",
		"body": [
			"X = digits.data[:500]",
			"y = digits.target[:500]\n",
			"def viz_with_tSNE(X, y) -> None:",
			"\ttsne = manifold.TSNE(n_components=2, random_state=0)",
			"\tX_2d = tsne.fit_transform(X)",
			"\tfig, ax = plt.subplots()",
			"\tax.scatter(X_2d[:, 0], X_2d[:, 1], c=y)",
			"viz_with_tSNE(X, y)"
		],
		"description": "scikit-learn, visualize complex embedding with sklearn.manifold.tSNE(...), t Distribution Stochastic Neighbor Embedding; As TSNE cannot be applied to new data, we need to use its fit_transform method."
	},

	"skl-pca": {
		"prefix": "skl-pca",
		"body": [
			"spca = decomposition.SparsePCA(n_components=${1:2})",
			"kpca = decomposition.KernelPCA(n_components=${1:2})",
			"proj = spca.fit_transform(${2:digits.data})",
		],
		"description": "scikit-learn, sklearn.decomposition.XXXPCA(...)"
	},

	"skl-svm": {
		"prefix": "skl-svm",
		"body": [
			"clf = svm.SVC(C=${1:5.}, gamma=${2:0.001})",
			"clf.fit(${3:X_train}, ${4:y_train})",
			"y_pred = clf.predict(${5:X_test})",
		],
		"description": "scikit-learn, sklearn.svm.SVC(...)"
	},

	"skl-pipe": {
		"prefix": "skl-pipe",
		"body": [
			"clf = pipeline.Pipeline([",
			"\t('pca', decomposition.PCA(n_components=${1:150}, whiten=True)),",
			"\t('svm', svm.LinearSVC(C=${2:1.0}))",
			"])",
			"clf.fit(X_train, y_train)",
			"y_pred = clf.predict(X_test)",
			"print(metrics.confusion_matrix(y_pred, y_test))",
		],
		"description": "scikit-learn, sklearn.pipeline.Pipeline(...)"
	},

	"skl-poly": {
		"prefix": "skl-poly",
		"body": [
			"def generating_func(x: array, err: float=0.5) -> array:",
			"\treturn np.random.normal(10 - 1. / (x + 0.1), err)\n",
			"np.random.seed(1)",
			"x = np.random.random(200)",
			"y = generating_func(x, err=1.)",
			"X_train, X_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=.4)",
			"degrees = np.arange(1, 21)\n",
			"def viz_validate_curve(x: array, y: array, degrees: array) -> None:",
			"\tmodel = pipeline.make_pipeline(preprocessing.PolynomialFeatures(degree=2), linear_model.LinearRegression())",
			"\ttrain_scores, validation_scores = model_selection.validation_curve(",
			"\t\tmodel, x[:, np.newaxis], y,",
			"\t\tparam_name='polynomialfeatures__degree',",
			"\t\tparam_range=degrees",
			"\t)",
			"\tplt.plot(degrees, validation_scores.mean(axis=1), label='cross-validation', alpha=.75)",
			"\tplt.plot(degrees, train_scores.mean(axis=1), label='training', alpha=.65)",
			"\tplt.legend(loc=0)",
			"\tplt.title('validation curve')",
			"\tplt.xlabel('degree of fit')",
			"\tplt.ylabel('explained variance')",
			"\treturn",
			"viz_validate_curve(x, y, degrees)",
		],
		"description": "scikit-learn, sklearn.preprocessing.PolynomialFeatures(...), and sklearn.model_selection.validation_curve(...)"
	},

	"skl-nm": {
		"prefix": "skl-nm",
		"body": [
			"def skl_min_max_scaling(df: pd.DataFrame) -> pd.DataFrame:",
			"\tscaler = MinMaxScaler()",
			"\tscaler.fit(df)",
			"\tscaled = scaler.fit_transform(df)",
			"\treturn pd.DataFrame(",
			"\t\tdata=scaled,",
			"\t\tcolumns=df.columns,",
			"\t\tindex=None,",
			"\t)",
		],
		"description": "scikit-learn, sklearn.preprocessing.MinMaxScaler(...) normalizing"
	},

	"skl-pimp": {
		"prefix": "skl-pimp",
		"body": [
			"def plot_rfpimp(df: pd.DataFrame, features: list[str], response_variable: str) -> None:",
			"\tdf_train, df_test = model_selection.train_test_split(df, test_size=0.20)",
			"\tdf_train = df_train[features]",
			"\tdf_test = df_test[features]",
			"\tX_train, y_train = df_train.drop(response_variable, axis=1), df_train[response_variable]",
			"\tX_test, y_test = df_test.drop(response_variable, axis=1), df_test[response_variable]",
			"\trf = RandomForestRegressor(n_estimators=100, n_jobs=-1)",
			"\trf.fit(X_train, y_train)",
			"\timp = rfpimp.importances(rf, X_test, y_test)",
			"\tfig, ax = plt.subplots(figsize=(6, 3))",
			"\tax.barh(imp.index, imp['Importance'], height=0.8, facecolor='grey', alpha=0.8, edgecolor='k')",
			"\tax.set_xlabel('Importance score')",
			"\tax.set_title('Permutation feature importance')",
			"\tax.text(0.8, 0.15, 'rfpimp plot', fontsize=12, ha='center', va='center', transform=ax.transAxes, color='grey', alpha=0.5)",
			"\tax.invert_yaxis()",
			"\tfig.tight_layout()",
			"\treturn",
		],
		"description": "scikit-learn, using scikit-learn + rfpimp to plot feature importance"
	},

	"skl-quick": {
		"prefix": "skl-quick",
		"body": [
			"X_train, X_test, y_train, y_test = model_selection.train_test_split(${1:X}, ${2:y}, test_size=.2, random_state=0)",
			"clf = ${3:naive_bayes.GaussianNB}()",
			"clf.fit(X_train, y_train)",
			"y_pred = clf.predict(X_test)",
			"y_true = y_test",
			"print(metrics.classification_report(y_true, y_pred))",
			"print(metrics.confusion_matrix(y_true, y_pred))",
		],
		"description": "scikit-learn, using sklearn.naive_bayes.GaussianNB(...) to draw a quick baseline classification"
	},

	"skl-std": {
		"prefix": "skl-std",
		"body": [
			"#🌌Standards of model selection",
			"#   🎯High Bias: ",
			"#       1) add more features;",
			"#       2) use a more sophisticated model;",
			"#       3) use fewer samples",
			"#       4) decrease regularization",
			"#   ⚡High Variance",
			"#       1) use fewer features",
			"#       2) use a simpler model",
			"#       3) use more training samples",
			"#       4) increase regularization",
			"#   🔥Caution",
			"#       it is recommended to split the data into three sets.",
			"#       1) [T] training set (~60%)",
			"#       2) [V] validation set (~20%)",
			"#       3) [T] test set (~20%)",
		],
		"description": "scikit-learn, standards of model selection"
	},

	"skl-rhyme": {
		"prefix": "skl-rhyme",
		"body": [
			"🌌树叶线邻模 + 聚簇降维度",
			"#🌞线脊向量随梯减",
			"#⚡邻高叉解贝叶斯",
			"#🌳树合特采保序回",
			"#😎多类多产半监督",
			"#🥅概率矫正中网模",
		],
		"description": "scikit-learn, supervised learning, mnemonic rhyme"
	},

	"skl-rocplot": {
		"prefix": "skl-rocplot",
		"body": [
			"fpr, tpr, _ = metrics.roc_curve(${1:y}, ${2:y_pred})",
			"auc = metrics.roc_auc_score($1, $2)",
			"fig, ax = plt.subplots()",
			"ax.plot(fpr, tpr, label=f'AUC={auc}')",
			"ax.set_ylabel('True Positive Rate')",
			"ax.set_xlabel('False Positive Rate')",
			"ax.legend(loc=0)",
		],
		"description": "scikit-learn, compare multiple ROC curvers in a single plot"
	},

	"skl-roc": {
		"prefix": "skl-roc",
		"body": [
			"#ROC = `Actual` ~ `Prediction`",
			"#| Positive      | Negative      |",
			"#|:--------------|:--------------|",
			"#|True Positive  | False Positive|",
			"#|False Negative | True Negative |",
			"#",
			"#Accuracy & Sensitivity & specificity",
			"#- `Accuracy`         = (TP + TN) / (TP + FP + FN + TN);",
			"#- `Sensitivity`(TPR) = TP / (TP + FN); higher is better -> y-axis",
			"#- `Specificity`(FPR) = FP / (FP + TN); lower is better  -> x-axis",
			"#- `precision`        = TP / (TP + FP): balanced with recall",
			"#- `recall`           = TN / (FN + TN): balanced with preciesion",
		],
		"description": "scikit-learn, construct Receiver Operating Characteristic(ROC) Curve"
	},

	"skl-kf": {
		"prefix": "skl-kf",
		"body": [
			"kf = model_selection.KFold(n_splits=${1:5}, shuffle=True, random_state=0)",
			"y_pred = []",
			"y_true = []",
			"for train_index, test_index in kf.split(X, y):",
			"\tX_train, x_test = X[train_index], X[test_index]",
			"\ty_train, y_test = y[train_index], y[test_index]",
			"\t# scaling, modeling then predict logic here",
			"\t...",
			"\ty_pred.extend(...)",
			"\ty_true.extend(...)",
			"metrics.accuracy_score(y_pred, y_true)",
		],
		"description": "scikit-learn, model_selection.KFold(...), with regression problem"
	},

	"skl-skf": {
		"prefix": "skl-skf",
		"body": [
			"skf = model_selection.StratifiedKFold(n_splits=${1:5}, shuffle=True, random_state=0)",
			"y_pred = []",
			"y_true = []",
			"for train_index, test_index in skf.split(X, y):",
			"\tX_train, x_test = X[train_index], X[test_index]",
			"\ty_train, y_test = y[train_index], y[test_index]",
			"\t# scaling, modeling then predict logic here",
			"\t...",
			"\ty_pred.extend(...)",
			"\ty_true.extend(...)",
			"metrics.accuracy_score(y_pred, y_true)",
		],
		"description": "scikit-learn, model_selection.StratifiedKFold(...), with classification problem"
	},

	"skl-tf": {
		"prefix": "skl-tf",
		"body": [
			"def func(df: pd.DataFrame) -> pd.DataFrame:",
			"\tpass",
			"tf = preprocessing.FunctionTransformer(func)",
		],
		"description": "scikit-learn, preprocessing.FunctionTransformer(func); 💛similar operation in Pandas"
	},

	"skl-fs": {
		"prefix": "skl-fs",
		"body": [
			"fs = feature_selection.${1:SelectPercentile}(feature_selection.${2:chi2}, percentile=${3:50})",
			// "pipe = Pipeline.make_pipeline(transformer, fs, mod)",
		],
		"description": "scikit-learn, feature_selection.XXX(...)"
	},

	"skl-vote": {
		"prefix": "skl-vote",
		"body": [
			"vc = ensemble.${1:VotingClassifier}(",
			"\testimators=[",
			"\t\t('${2:clf1}', clf1),",
			"\t\t('${3:clf2}', clf2),",
			"\t],",
			"\tvoting='${4:soft}',",
			")",
			"model_selection.cross_val_score(vc, X, y).mean()",
			"params = {",
			"\t'voting': ['hard','soft'],",
			"\t'weights': [(1,1,1),(2,1,1),(1,2,1),(1,1,2)]",
			"}",
			"grid = model_selection.GridSearchCV(vc, params)",
			"grid.fit(X, y)",
			"grid.best_params_",
		],
		"description": "scikit-learn, ensemble.VotingXXX(...), create multiple models and ensemble them to improve classifier's accuracy"
	},

	"skl-tune": {
		"prefix": "skl-tune",
		"body": [
			"pipe = pipeline.Pipeline([",
			"\t('preprocessor', ct),",
			"\t('classifier', clf1),",
			"])",
			"params1 = {",
			"\t'preprocessor__vectoriser__ngram_range': [(1, 1), (1, 2)],",
			"\t'classifier__penalty' : ['l1', 'l2'],",
			"\t'classifier' : [clf1],",
			"}",
			"params2 = {",
			"\t'preprocessor__vectoriser__ngram_range': [(1, 1), (1, 2)],",
			"\t'preprocessor__n_estimators': [100, 200],",
			"\t'classifier__min_samples_leaf' : [1, 2],",
			"\t'classifier' : [clf2],",
			"}",
			"params = [params1, params2]",
			"grid = model_selection.GridSearchCV(pipe, params)",
			"grid.fit(X, y)",
			"grid.best_params_",
			"means = grid.cv_results_['mean_test_score']",
			"params_summary = grid.cv_results_['params']",
			"df = pd.DataFrame(list(zip(means, params_summary)), columns=['mean_score', 'parameters'])",
		],
		"description": "scikit-learn, tune 2+ models usinng the same grid search"
	},

	"skl-nn": {
		"prefix": "skl-nn",
		"body": [
			"mlpc = neural_network.${1:MLPClassifier}(hidden_layer_sizes=(${2:11}, $2, $2), max_iter=500)",
		],
		"description": "scikit-learn, neural_network(...)"
	},

	"skl-commonparams": {
		"prefix": "skl-commonparams",
		"body": [
			"n_estimators=${1:100}",
			"max_depth=${2:None}",
			"learning_rate=${3:.1}",
			"C=${4:1.}",
			"alpha=${5:1.}",
			"kernel=${6:'rbf'}",
			"n_neighbors=${7:5}",
			"hidden_layer_sizes=${8:100}",
			"max_iter=${9:1000}",
			"random_state=${10:None}",
		],
		"description": "scikit-learn, common parameters for reference"
	},

	"dp-concepts": {
		"prefix": "dp-concepts",
		"body": [
			"# category: CSB",
			"# 1. creational: FAB PS",
			"# 1.1 Factory, Abstract Factory",
			"# 1.2 Builder, Prototype, Singleton",
			"# 2. structural: ABCD FFP",
			"# 2.1 Adapter, Bridge, Composite, Decorator",
			"# 2.2 Facade, Flyweight, Proxy",
			"# 3. Behavioral: CCIM MOSS TV",
			"# 3.1 Chain, Command, Iterator, Mediator",
			"# 3.2 Memento, Observer, State, Strategy",
			"# 3.3 Template, Visitor",
			"# P B D: presentation layer - business layer, database layer",
			""
		],
		"description": "Practical Design Pattern, outline"
	},

	"dp-factory": {
		"prefix": "dp-factory",
		"body": [
			"class IFactory(metaclass=ABCMeta):",
			"\t@abstractmethod",
			"\tdef ${1:drawable}(self) -> T:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Factory"
	},

	"dp-abstractfactory": {
		"prefix": "dp-abstractfactory",
		"body": [
			"class AbsFactory(ABC):",
			"\t@abstractmethod",
			"\tdef make_product_a(self) -> AbsProductA:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef make_product_b(self) -> AbsProductB:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Abstract Factory"
	},

	"dp-builder": {
		"prefix": "dp-builder",
		"body": [
			"class IBuilder(ABC):",
			"\t@abstractmethod",
			"\tdef reset(self) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@property",
			"\t@abstractmethod",
			"\tdef ${1:product}(self) -> T:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef ${2:product_part_a}(self) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef ${3:product_part_b}(self) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef ${4:product_part_c}(self) -> None:",
			"\t\traise NotImplementedError$0\n",
		],
		"description": "Practical Design Pattern, Builder"
	},

	"dp-prototype": {
		"prefix": "dp-prototype",
		"body": [
			"class Prototype(ABCMeta):",
			"\tdef __init__(self, ${1:value_type}, ${2:ref_type}, ${3:circular_ref}):",
			"\t\tself.$1 = $1",
			"\t\tself.$2 = $2",
			"\t\tself.$3 = $3\n",
			"\t@abstractmethod",
			"\tdef __copy__(self):",
			"\t\t$2 = copy.copy(self.$2)",
			"\t\t$3 = copy.copy(self.$3)",
			"\t\tnew = self.__class__(self.$1, $2, $3)",
			"\t\tnew.__dict__.update(self.__dict__)",
			"\t\treturn new\n",
			"\t@abstractmethod",
			"\tdef __deepcopy__(self, memo=None):",
			"\t\tif memo is None:",
			"\t\t\tmemo = {}",
			"\t\t# First, let's create copies of the nested objects.",
			"\t\t$2 = copy.deepcopy(self.$2, memo)",
			"\t\t$3 = copy.deepcopy(self.$3, memo)",
			"\t\t# Then, let's clone the object itself, using the prepared clones of the",
			"\t\t# nested objects.",
			"\t\tnew = self.__class__(self.$1, $2, $3)",
			"\t\tnew.__dict__ = copy.deepcopy(self.__dict__, memo)",
			"\t\treturn new",
		],
		"description": "Practical Design Pattern, Prototype"
	},

	"dp-singlton": {
		"prefix": "dp-singlton",
		"body": [
			"class SingletonMeta(type):",
			"\t_instances = {}",
			"\tdef __call__(cls, *args: P.args, **kwargs: P.kwargs):",
			"\t\tif cls not in cls._instances:",
			"\t\t\tinstance = super().__call__(*args, **kwargs)",
			"\t\t\tcls._instances[cls] = instance",
			"\t\treturn cls._instances[cls]",
		],
		"description": "Practical Design Pattern, Singleton"
	},

	"dp-adaptor": {
		"prefix": "dp-adaptor",
		"body": [
			"class Target:",
			"\tdef request(self) -> str:",
			"\t\treturn 'Target: The default target's behavior.'\n",
			"class Adaptee:",
			"\tdef specific_request(self) -> str:",
			"\t\treturn '.eetpadA eht fo roivaheb laicepS'\n",
			"class Adapter(Target):",
			"\tdef __init__(self, adaptee: Adaptee) -> None:",
			"\t\tself.adaptee = adaptee\n",
			"\tdef request(self) -> str:",
			"\t\treturn f'Adapter: (TRANSLATED) {self.adaptee.specific_request()[::-1]}'",
		],
		"description": "Practical Design Pattern, Adaptor"
	},

	"dp-bridge": {
		"prefix": "dp-bridge",
		"body": [
			"class Abstraction:",
			"\tdef __init__(self, implementation: Implementation) -> None:",
			"\t\tself.implementation = implementation\n",
			"\tdef operation(self) -> str:",
			"\t\treturn f'Abstraction: Base operation with:\n{self.implementation.operation_implementation()}'\n",
			"class ExtendedAbstraction(Abstraction):",
			"\tdef operation(self) -> str:",
			"\t\treturn f'ExtendedAbstraction: Extended operation with:\n{self.implementation.operation_implementation()}'\n",
			"class Implementation(ABC):",
			"\t@abstractmethod",
			"\tdef operation_implementation(self) -> str:",
			"\t\tpass",
		],
		"description": "Practical Design Pattern, Bridge"
	},

	"dp-composite": {
		"prefix": "dp-composite",
		"body": [
			"class Component(ABC):",
			"\t@property",
			"\tdef parent(self) -> Component:",
			"\t\treturn self._parent\n",
			"\t@parent.setter",
			"\tdef parent(self, parent: Component):",
			"\t\tself._parent = parent\n",
			"\tdef add(self, component: Component) -> None:",
			"\t\tpass\n",
			"\tdef remove(self, component: Component) -> None:",
			"\t\tpass\n",
			"\tdef is_composite(self) -> bool:",
			"\t\treturn False\n",
			"\t@abstractmethod",
			"\tdef operation(self) -> str:",
			"\t\tpass",
		],
		"description": "Practical Design Pattern, Composite"
	},

	"dp-facade": {
		"prefix": "dp-facade",
		"body": [
			"class Facade:",
			"\t@staticmethod",
			"\tdef make_customer() -> Customer:",
			"\t\treturn Customer()\n   ",
			"\t@staticmethod",
			"\tdef make_invoice() -> Invoice:",
			"\t\treturn Invoice()\n",
			"\t@staticmethod",
			"\tdef make_product() -> Product:",
			"\t\treturn Product()",
		],
		"description": "Practical Design Pattern, Facade"
	},

	"dp-flyweight": {
		"prefix": "dp-flyweight",
		"body": [
			"class Flyweight:",
			"\tdef __init__(self, shared: str) -> None:",
			"\t\tself._shared = shared\n",
			"\tdef operate(self, unique: str) -> None:",
			"\t\ts = json.dumps(self._shared)",
			"\t\tu = json.dumps(unique)",
			"\t\tprint(f'{self.__class__}: shared -> ({s}), unique -> ({u})')",			
		],
		"description": "Practical Design Pattern, Flyweight"
	},

	"dp-proxy": {
		"prefix": "dp-proxy",
		"body": [
			"class ProxyMath:",
			"\tdef __init__(self, m: Math, attr: str) -> None:",
			"\t\tself._m = m",
			"\t\tfunc = getattr(m, attr)",
			"\t\tsetattr(self._m, attr, memoir(func))\n",
			"\tdef __getattr__(self, attr: str) -> typing.Any:",
			"\t\treturn getattr(self._m, attr)",			
		],
		"description": "Practical Design Pattern, Proxy"
	},

	"dp-command": {
		"prefix": "dp-command",
		"body": [
			"class Command:",
			"\tdef __init__(self, rec: Receiver, req: str) -> None:",
			"\t\tself._rec = rec",
			"\t\tself._req = req\n",
			"\tdef execute(self) -> typing.Any:",
			"\t\treturn self._rec.handle(self._req)",
		],
		"description": "Practical Design Pattern, Command"
	},

	"dp-chain": {
		"prefix": "dp-chain",
		"body": [
			"class IHandler(ABC):",
			"\t@abstractmethod",
			"\tdef next(self, handler: IHandler) -> IHandler:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef handle(self, request: str) -> (str | None):",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Chain"
	},

	"dp-iterator": {
		"prefix": "dp-iterator",
		"body": [
			"class AlphabeticIterator(Iterator):",
			"\t\treverse = False",
			"\t\tposition = None\n",
			"\tdef __init__(self, wi: WorldIterable, reverse: bool=False) -> None:",
			"\t\tself._wi = wi",
			"\t\tself._reverse = reverse",
			"\t\tself._position = -1 if reverse else 0\n",
			"\tdef __next__(self) -> typing.Any:",
			"\t\ttry:",
			"\t\t\tres = self._wi[self._position]",
			"\t\t\tself._position += -1 if self._reverse else 1",
			"\t\texcept IndexError:",
			"\t\t\traise StopIteration",
			"\t\treturn res",
		],
		"description": "Practical Design Pattern, Iterator"
	},

	"dp-mediator": {
		"prefix": "dp-mediator",
		"body": [
			"class IMediator(ABC):",
			"\t@abstractmethod",
			"\tdef notify(self, comp: IComponent, event: str) -> None:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Mediator"
	},

	"dp-observer": {
		"prefix": "dp-observer",
		"body": [
			"class ISubject(ABC):",
			"\t@abstractmethod",
			"\tdef attach(self, ob: IObserver) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef detach(self, ob: IObserver) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef operate(self) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef notify(self) -> None:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Observer"
	},

	"dp-memento": {
		"prefix": "dp-memento",
		"body": [
			"class IMemento(ABC):",
			"\t@abstractmethod",
			"\tdef get_date(self) -> str:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef get_info(self) -> str:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef get_state(self) -> str:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Memento"
	},

	"dp-state": {
		"prefix": "dp-state",
		"body": [
			"class IState(ABC):",
			"\t@property",
			"\tdef context(self) -> Context:",
			"\t\treturn self._context\n",
			"\t@context.setter",
			"\tdef context(self, val: Context) -> None:",
			"\t\tself._context = val\n",
			"\t@abstractmethod",
			"\tdef do_this(self) -> None:",
			"\t\traise NotImplementedError\n",
			"\t@abstractmethod",
			"\tdef do_that(self) -> None:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, State"
	},

	"dp-strategy": {
		"prefix": "dp-strategy",
		"body": [
			"class Executor:",
			"\tdef __init__(self, func: typing.Callable[P,T]=None) -> None:",
			"\t\tif not func:",
			"\t\t\traise ValueError",
			"\t\tself._func = func\n",
			"\tdef execute(self, *args: P.args, **kwargs: P.kwargs) -> T:",
			"\tt\return self._func(*args, **kwargs)",
		],
		"description": "Practical Design Pattern, Strategy"
	},

	"dp-template": {
		"prefix": "dp-template",
		"body": [
			"class Template(ABC):",
			"\tdef operate(self) -> None:",
			"\t\tself.step_01()",
			"\t\tself.step_02()",
			"\t\tself.step_03()",
			"\t\tself.hook_01()",
			"\t\tself.required_step_01()",
			"\t\tself.required_step_01()",
			"\t\tself.hook_02()\n",
			"\tdef step_01(self) -> None:",
			"\t\tpass",
			"\tdef step_02(self) -> None:",
			"\t\tpass",
			"\tdef step_03(self) -> None:",
			"\t\tpass",
			"\tdef hook_01(self) -> None:",
			"\t\tpass",
			"\tdef hook_02(self) -> None:",
			"\t\tpass\n",
			"\t@abstractmethod",
			"\tdef required_step_01(self) -> None:",
			"\t\traise NotImplementedError",
			"\t@abstractmethod",
			"\tdef required_step_01(self) -> None:",
			"\t\traise NotImplementedError$0",
		],
		"description": "Practical Design Pattern, Template"
	},

	"dp-visitor": {
		"prefix": "dp-visitor",
		"body": [
			"class Visitor:",
			"\t@overload",
			"\tdef visit(self, d: Dot) -> None: ...\n",
			"\t@overload",
			"\tdef visit(self, s: Shape) -> None: ...\n",
			"\tdef visit(self, f: (Dot | Shape)) -> None:",
			"\t\tprint(f'{self.__class__.__name__} visited {f.__class__.__name__}')",
		],
		"description": "Practical Design Pattern, Visitor"
	},

	"db-enter-table": {
		"prefix": "db-enter-table",
		"body": [
			"import contextlib",
			"import sqlite3\n",
			"@contextlib.contextmanager",
			"def enter_table(table_name: str, cur: sqlite3.Cursor, action: str) -> typing.Generator[sqlite3.Cursor,None,None]:",
			"\tcur.execute(",
			"\t\t'''",
			"\t\tCREATE TABLE IF NOT EXISTS {0}(",
			"\t\t\tid INT,$0",
			"\t\t\t${1:小说名} TEXT,",
			"\t\t\t${2:作者} TEXT,",
			"\t\t\t${3:类别} TEXT,",
			"\t\t\t${4:细分类别} TEXT,",
			"\t\t\tUNIQUE($1, $2, $3, $4) ON CONFLICT IGNORE",
			"\t\t);",
			"\t\t'''.format(table_name))",
			"\ttry:",
			"\t\tyield",
			"\tfinally:",
			"\t\tlogging.info(f'SQL {action} completed')",
		],
		"description": "Database, create & enter table"
	},

	"db-conn": {
		"prefix": "db-conn",
		"body": [
			"db_path = $1",
			"table_name = $2",
			"action = $3",
			"with sqlite3.connect(db_path) as conn:",
			"\tcur = conn.cursor()",
			"\twith enter_table(table_name, cur, action):",
			"\t\tdf.to_sql(table_name, conn, if_exists='replace', index=True)",
		],
		"description": "Database, connection"
	},

	"db-table": {
		"prefix": "db-table",
		"body": [
			"@contextlib.contextmanager",
			"def temporary_table(cur):",
			"\t# create",
			"\tcur.execute('CREATE TABLE ${1:name}(...);')",
			"\ttry:",
			"\t\tyield",
			"\tfinally:",
			"\t\t# drop",
			"\t\tcur.execute('DROP TABLE $1;')",
		],
		"description": "Database, temporary table"
	},

	"db-insert": {
		"prefix": "db-insert",
		"body": [
			"cur.execute('INSERT INTO ${1:name}(...) VALUES(...);')",
		],
		"description": "Database, insert"
	},

	"db-select": {
		"prefix": "db-select",
		"body": [
			"for row in cur.execute(...):",
      "\tprint(row)",
		],
		"description": "Database, select"
	},

	"monads-func": {
		"prefix": "monadsfunc",
		"body": [
			"class ${1:IMonadsContainer}:",
			"\tpass\n",
			"def wrappedWithMonads(x: ${2:int}) -> $1:",
			"\treturn $1()\n",
			"def operate(x: ${2:int}) -> $1:",
			"\treturn $1()\n",
			"def handle(x: ${2:int}) -> $1:",
			"\treturn $1()\n",
			"def runWithMonads(input: $1, transform: typing.Callable[..., $1]) -> $1:",
			"\treturn $1()\n",
		],
		"description": "Monads pattern, wrapped Type, wrapped function, run"
	},

	"django-asgi-channels-routing": {
		"prefix": "dj-channel-sroute",
		"body": [
			"from channels.auth import AuthMiddlewareStack",
			"from channels.routing import ProtocolTypeRouter, URLRouter",
			"from core.asyncgraph.routing import ws_urlpatterns\n",
			"application = ProtocolTypeRouter({",
			"\t'http': get_asgi_application(),",
			"\t'websocket': AuthMiddlewareStack(URLRouter(ws_urlpatterns))",
			"})",
		],
		"description": "Django, asgi.py, channels, routing"
	},

	"django-settings-config-email": {
		"prefix": "dj-config-email",
		"body": [
			"EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'",
		],
		"description": "Django, settings.py, config email"
	},

	"django-settings-config-localhost": {
		"prefix": "dj-config-localhost",
		"body": [
			"'localhost',",
			"'127.0.0.1',",
		],
		"description": "Django, settings.py, config localhost"
	},

	"django-settings-config-templates": {
		"prefix": "dj-config-templates",
		"body": [
			"BASE_DIR / '${1:core}/${2:templates}',"
		],
		"description": "Django, settings.py, config templates"
	},

	"django-settings-CSRF-TRUSTED": {
		"prefix": "dj-config-CsrfTruted",
		"body": [
			"CSRF_TRUSTED_ORIGINS = [",
			"\t'http://${1:your.ip.address.here}',",
			"]",
		],
		"description": "Django, settings.py, config CSRF_TRUSTED_ORIGINS"
	},

	"django-settings-CKEditor-BASIC": {
		"prefix": "dj-config-CKEditorBasic",
		"body": [
			"CKEDITOR_BASEPATH = '/${1:my_static}/ckeditor/ckeditor/'",
			"CKEDITOR_UPLOAD_PATH = 'ckeditor/uploads/'",
			"CKEDITOR_CONFIGS = {",
			"\t'${1:default}': {",
			"\t\t'toolbar': 'Basic',",
			"\t\t'height': ${2:300},",
			"\t\t'width': ${2:300},",
			"\t},",
			"}\n",
		],
		"description": "Django, settings.py, config CKEditor basic"
	},

	"django-settings-CKEditor-Custom": {
		"prefix": "dj-config-CKEditorCustom",
		"body": [
			"CKEDITOR_BASEPATH = '/${1:my_static}/ckeditor/ckeditor/'",
			"CKEDITOR_UPLOAD_PATH = 'ckeditor/uploads/'",
			"CKEDITOR_CONFIGS = {",
			"\t'default': {",
			"\t\t'toolbar': 'Custom',",
			"\t\t'toolbar_Custom': [",
			"\t\t\t['Bold', 'Italic', 'Underline'],",
			"\t\t\t['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],",
			"\t\t\t['Link', 'Unlink'],",
			"\t\t\t['RemoveFormat', 'Source']",
			"\t\t]",
			"\t}",
			"}\n",
		],
		"description": "Django, settings.py, config CKEditor custom"
	},

	"django-settings-TEMPLATES-Debug-OPTIONS": {
		"prefix": "dj-config-TemplateOptionDebug",
		"body": [
			"'string_if_invalid': 'INVALID EXPRESSION: %s',",
		],
		"description": "Django, settings.py, config TEMPLATES=[{...,'OPTIONS':{here}}]"
	},

	"django-settings-channels-config": {
		"prefix": "dj-config-Channels",
		"body": [
			"ASGI_APPLICATION = 'config.asgi.application'",
			"CHANNEL_LAYERS = {",
			"\t'${1:default}': {",
			"\t\t'BACKEND': 'channels_redis.core.RedisChannelLayer',",
			"\t\t'CONFIG': {",
			"\t\t\t'hosts': [('127.0.0.1'), ${2:6379}]",
			"\t\t}",
			"\t}",
			"}",			
		],
		"description": "Django, settings.py, config channels"
	},

	"django-settings-static": {
		"prefix": "dj-config-static",
		"body": [
			"STATICFILES_DIRS = [",
			"\tBASE_DIR / '${1:core}/static',",
			"\t'${2:/var/www/static/}',",
			"]",
			"STATIC_ROOT = ${3|BASE_DIR / 'staticfiles','/var/www/example.com/staticfiles/'|}",
			"MEDIA_URL = 'media/'",
			"MEDIA_ROOT = BASE_DIR / 'media/'",
			"# make explicit in all django projects",
			"STATICFILES_FINDERS = [",
			"\t'django.contrib.staticfiles.finders.FileSystemFinder',",
			"\t'django.contrib.staticfiles.finders.AppDirectoriesFinder',",
			"]",
		],
		"description": "Django, settings.py, static, media, finders"
	},

	"django-settings-messages-config": {
		"prefix": "dj-config-messages",
		"body": [
			"from django.contrib import messages\n",
			"MESSAGE_TAGS = {",
			"\tmessages.ERROR : 'danger'",
			"}"
		],
		"description": "Django, settings.py, set up built-in messages levels / tags to match up bootstrap4 "
	},

	"django-settings-crispy-form-install": {
		"prefix": "dj-install-crispy",
		"body": [
			"'crispy_forms',",
			"'crispy_bootstrap5',",
		],
		"description": "Django, settings.py, INSTALLED_APPS, django-crispy-form + crispy_bootstrap"
	},

	"django-settings-performance-toolkit-install": {
		"prefix": "dj-install-DTLSilk",
		"body": [
			"'django_extensions',",
			"'debug_toolbar',",
			"'silk',",
		],
		"description": "Django, settings.py, INSTALLED_APPS, django-extensions, django-debug-toolbar, django-silk"
	},

	"django-settings-allauth-config": {
		"prefix": "dj-config-allauth",
		"body": [
			"ACCOUNT_USERNAME_REQUIRED = False",
			"ACCOUNT_AUTHENTICATION_METHOD = 'email'",
			"ACCOUNT_EMAIL_REQUIRED = True",
			"ACCOUNT_UNIQUE_EMAIL = True",
		],
		"description": "Django, settings.py, config allauth"
	},

	"django-settings-crispy-form-config": {
		"prefix": "dj-config-crispy",
		"body": [
			"CRISPY_TEMPLATE_PACK = 'bootstrap5'",
			"CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'\n",
		],
		"description": "Django, settings.py, CRISPY_TEMPLATE_PACK, packages:django-crispy-forms, crispy-bootstrap4"
	},

	"django-settings-user-model-login-logout-redirect": {
		"prefix": "dj-config-usermodel",
		"body": [
			"# Customized User Model",
			"AUTH_USER_MODEL = '${1:app_label}.${2:AppUser}'",
			"LOGIN_URL = '${3:app_ns}:${4:route}'",
			"LOGIN_REDIRECT_URL = '${5:app_ns}:${6:route}'",
			"LOGOUT_REDIRECT_URL = '${7:app_ns}:${8:route}'\n",
		],
		"description": "Django, settings.py, customized user model + LOGIN_URL, LOGOUT / LOGIN_REDIRECT_URL"
	},

	"django-settings-databases-postgresql": {
		"prefix": "dj-config-DBpg",
		"body": [
			"DATABASES = {",
			"\t'${1:default}': {",
			"\t\t'ENGINE': 'django.db.backends.postgresql',",
			"\t\t'NAME': os.getenv('DB_NAME'),",
			"\t\t'USER': os.getenv('DB_USER'),",
			"\t\t'PASSWORD': os.getenv('DB_PASSWORD'),",
			"\t\t'HOST': os.getenv('DB_HOST'),",
			"\t\t'PORT': os.getenv('DB_PORT'),",
			"\t}",
			"}",
		],
		"description": "Django, settings.py, Databases PostgreSQL"
	},

	"django-settings-caches": {
		"prefix": "dj-config-Caches",
		"body": [
			"CACHES = {",
			"\t'default': {",
			"\t\t'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',",
			"\t\t'LOCATION': '${1:/var/tmp/django_cache}',",
			"\t}",
			"}",
		],
		"description": "Django, settings.py, caches"
	},

	"django-settings-timezone": {
		"prefix": "dj-config-Timezone",
		"body": [
			"TIME_ZONE = '${1:Asia/Shanghai}'\n",
		],
		"description": "Django, settings.py, timezone"
	},

	"django-admin-tabular-inline": {
		"prefix": "dj-admin-TabularInline",
		"body": [
			"class ${1:MyModel}Inline(admin.TabularInline):",
			"\tmodel = $1",
		],
		"description": "Django, admin.py, TabularInline"
	},

	"django-admin-import-export-resource-model": {
		"prefix": "dj-admin-ImportExportModel",
		"body": [
			"from import_export import resources, fields\n",
			"class ${1:MyModel}Resource(resources.ModelResource):",
			"\t# format field before export",
			"\t${2:field_name} = fields.Field()\n",
			"\tdef dehydrate_$2(self, obj: $1) -> ${3: T}:",
			"\t\treturn # transform to desired format",
			"\tdelete = fields.Field(widget=widgets.BooleanWidget())",
			"\t# To delete objects during import",
			"\tdef for_delete(self, row, instance):",
			"\t\treturn self.fields['delete'].clean(row)\n",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\timport_id_fields = ('${4:isbn}',)",
			"\t\tfields = ('${5:name}',)",
			"\t\texclude = ('${6:pk}',)",
			"\t\timport_order = ('${7:pk}','${8:price}',)",
			"\t\texport_order = ('$8','$7',)",
			"\t\tuse_natural_foreign_keys = True\n",
		],
		"description": "Django, admin.py, import_export models, resource model"
	},

	"django-admin-model-admin": {
		"prefix": "dj-admin-UserModel",
		"body": [
			"from django.utils.translation import gettext_lazy as _",
			"from django.utils.html import format_html\n",
			"class ${1:MyModel}Admin(admin.ModelAdmin):",
			"\tlist_display = [f.name for f in $1._meta.fields if f.name != 'password']",
			"\tfilter_horizontal = ['groups','user_permissions',]\n",
			"\tfieldsets = (",
			"\t\t(None,{'fields':('${2:username}','${3:email}')}),",
			"\t\t#(_('Personal info'),{'fields':('name','$3')}),",
			"\t\t(",
			"\t\t\t_('Permissions'),",
			"\t\t\t{",
			"\t\t\t\t'fields':(",
			"\t\t\t\t\t'is_active',",
			"\t\t\t\t\t'is_staff',",
			"\t\t\t\t\t'is_superuser',",
			"\t\t\t\t\t'groups',",
			"\t\t\t\t\t'user_permissions',",
			"\t\t\t\t),",
			"\t\t\t},",
			"\t\t),",
			"\t\t#(_('Important dates'),{'fields':('last_login','date_joined')}),",
			"\t)",
			"\t#add_fieldsets = (_('${4:Head}'),{'field':('$2','$3',)})",
			"\tsearch_fields = ('$2','$3')",
			"\tordering = ('-date_joined$0',)\n",
			"\treadonly_fields = ('${5:show_url}',)\n",
			"\tdef $5(self,instance:$1) -> HttpResponse:",
			"\t\turl = reverse('${6:app_ns}:${7:route}',kwargs={'pk':instance.pk})",
			"\t\tresponse = format_html('''<a href='{0}'>{0}</a>''',url)",
			"\t\treturn response\n",
			"\t$5.short_description = '${8:Ice Cream Bar} URL'\n",
		],
		"description": "Django, admin.py, ModelAdmin, create + customized method"
	},

	"django-admin-model-import-export": {
		"prefix": "dj-admin-ImportExport",
		"body": [
			"from import_export.admin import ImportExportModelAdmin\n",
			"@admin.register(${1:MyModel})",
			"class $1ImportExportAdmin(ImportExportModelAdmin):",
			"\tlist_display = [f.name for f in $1._meta.fields]\n",
		],
		"description": "Django, admin.py, import_export, register"
	},

	"django-admin-register-unmanaged": {
		"prefix": "dj-admin-RegisterUnmanaged",
		"body": [
			"admin.site.register(${1:MyModel}, ${2:$1Admin})",
		],
		"description": "Django, admin.py, register `unmanaged(existing)` models"
	},

	"django-admin-register": {
		"prefix": "dj-admin-Register",
		"body": [
			"admin.site.register(${1:MyModel})",
		],
		"description": "Django, admin.py, register models"
	},

	"django-admin-register-decorator": {
		"prefix": "dj-admin-RegisterDecorator",
		"body": [
			"from django.contrib.auth import get_permission_codename\n",
			"@admin.register(${1:MyModel})",
			"class $1Admin(admin.ModelAdmin):",
			"\tinlines = [${2:MyModelInline},]",
			"\tlist_display = [f.name for f in $1._meta.fields]\n",
			"\tactions = ['$5']\n",
			"\t@admin.action(description='${3:desc}',permissions=['${4:publish}'])",
			"\tdef ${5:make_published}(self, request, queryset):",
			"\t\tqueryset.update(status='${6:p}')\n",
			"\tdef has_publish_permission(self, request):",
			"\t\topts = self.opts",
			"\t\tcodename = get_permission_codename('$4', opts)",
			"\t\treturn request.user.has_perm('%s.%s' % (opts.app_label, codename))\n",
		],
		"description": "Django, admin.py, register decorator"
	},

	"django-app-names": {
		"prefix": "dj-app-VerboseName",
		"body": [
			"name = '${1:root}.${2:app_label}'",
			"verbose_name = '${3:excellent app}'",
		],
		"description": "Django, apps.py, AppConfig names"
	},

	"django-models-FB-validators": {
		"prefix": "dj-validator-FBCustom",
		"body": [
			"from django.core.exceptions import ValidationError\n",
			"def validate_${1:what}(value: typing.Any) -> ValidationError:",
			"\tif ${2:condi}:",
			"\t\treturn ValidationError($0)\n",
		],
		"description": "Django, validators.py, validators, customize validator function"
	},

	"django-models-CB-validators": {
		"prefix": "dj-validator-CBCustom",
		"body": [
			"from django.core.validators import BaseValidator",
			"from django.core.exceptions import ValidationError\n",
			"class ${1:MyModel}${2:Field}Validator(BaseValidator):",
			"\tmessage = '$1 validation error'",
			"\tcode = '$1_validation_error_code: ${3:6943}'\n",
			"\tdef __call__(self, value: (str | None)) -> None:",
			"\t\tif not value.${4:startswith}($0):",
			"\t\t\traise ValidationError(",
			"\t\t\t\tmessage = self.message,",
			"\t\t\t\tcode = self.code,",
			"\t\t\t\tparams={'value': value},",
			"\t\t\t)\n",
		],
		"description": "Django, validators.py, validators, customize validator class"
	},

	"django-models-validators-builtin": {
		"prefix": "dj-validator-Bultin",
		"body": [
			"from django.core.exceptions import ValidationError",
			"from django.core.validators import (EmailValidator, URLValidator, DecimalValidator, MaxValueValidator, MinValueValidator)\n",
		],
		"description": "Django, validators.py, validators, builtin"
	},

	"django-models-Email": {
		"prefix": "dj-model-Email",
		"body": [
			"class Email(models.Model):",
			"\tsubject = models.CharField(max_length=500)",
			"\tmessage = models.TextField(max_length=500)",
			"\temail = models.EmailField()",
			"\tcreated_at = models.DateTimeField(auto_now_add=True, blank=True, null=True)",
			"\tedited_at = models.DateTimeField(auto_now=True)\n",
			"\tdef __str__(self):",
			"\t\treturn self.id\n",
		],
		"description": "Django, models.py, Email Model"
	},

	"django-models-Lookup-custom": {
		"prefix": "dj-model-LookupCustom",
		"body": [
			"from django.db.models import Lookup\n",
			"class ${1:LookupName}(Lookup):",
			"\tlookup_name = '${2:lt}'\n",
			"\tdef as_sql(self, compiler, connection) -> tuple[str,typing.Any]:",
			"\t\tlhs, lhs_params = compiler.compile(self.lhs.lhs)",
			"\t\trhs, rhs_params = self.process_rhs(compiler, connection)",
			"\t\tparams = lhs_params + rhs_params + lhs_params + rhs_params",
			"\t\treturn '%s < %s AND %s > -%s' % (lhs, rhs, lhs, rhs), params\n",
			"${3:Field}.register_lookup($1)\n",
		],
		"description": "Django, models.py, custom Lookup, By using Transform instead of Lookup it means we are able to chain further lookups afterward"
	},

	"django-models-Transform-custom": {
		"prefix": "dj-model-TransformCustom",
		"body": [
			"from django.db.models import FloatField, Transform\n",
			"class ${1:TransformName}(Transform):",
			"\tlookup_name = '${2:abs}'",
			"\tfunction = '${3:ABS}'",
			"\tbilateral = ${4:False}\n",
			"\t@property",
			"\tdef output_field(self):",
			"\t\nreturn ${5:What}Field()\n",
			"${6:Field}.register_lookup($1)\n",
		],
		"description": "Django, models.py, custom Transform, By using Transform instead of Lookup it means we are able to chain further lookups afterward"
	},

	"django-models-QuerySet-custom": {
		"prefix": "dj-model-QuerySetCustom",
		"body": [
			"class ${1:MyModel}QuerySet(models.QuerySet):",
			"\tdef ${2:func}(self) -> models.QuerySet:",
			"\t\treturn self.filter(...$0)\n",
		],
		"description": "Django, models.py, custom QuerySet, QuerySet.as_manager()"
	},

	"django-models-m2m-construct": {
		"prefix": "dj-model-m2mConstruct",
		"body": [
			"class ${1:MyModel}(models.Model):",
			"\t${2:fieldName} = models.ManyToManyField(${3:ModelName}, through='m2mGovernorModel') # add, remove, clear, set, all, count\n",
		],
		"description": "Django, models.py, M2M model, construct"
	},

	"django-models-m2m-reverse-query": {
		"prefix": "dj-model-m2mRQuery",
		"body": [
			"${1:queryobj}.${2:m2mtable}_${3:add}(field, through_deault={'field':value})",
			"${1:queryobj}.${2:m2mtable}_${3:set}.all() # add, remove, clear, set, all, count",
		],
		"description": "Django, models.py, M2M model, reverse query"
	},

	"django-models-manager": {
		"prefix": "dj-model-ManagerCustom",
		"body": [
			"objects = CustomManager()",
			"objects = CustomQuerySet.as_manager()",
			"objects = CustomManager.from_queryset(CustomQuerySet)()\n",
			"class ${1:Author}Manager(models.Manager):",
			"\t# the model must have a natural_key function that can be serialized as a JSON list in order to export data.",
			"\tdef get_by_natural_key(self, ${2:name}):",
			"\t\treturn self.get(name=$2)\n",
			"class $1(models.Model):",
			"\tobjects = $1()",
			"\t$2 = models.CharField(max_length=100)",
			"\t${3:birthday} = models.DateTimeField(auto_now_add=True)\n",
			"\tdef natural_key(self):",
			"\t\treturn (self.$2,)\n",
		],
		"description": "Django, models.py, Model Manager customization"
	},

	"django-models-custom-XXX-Choices": {
		"prefix": "dj-model-Choices",
		"body": [
			"class ${1:My}Choices(models.${2:Text}Choices):",
			"\tCRIME = 'C'",
			"\tSCI_FI = 'S'\n",
		],
		"description": "Django, models.py, customize XXXChoices"
	},

	"django-models-Meta-options": {
		"prefix": "dj-model-Meta",
		"body": [
			"class Meta:",
			"\tpermissions = [",
			"\t\t('${1:view}_${2:MyModel}', 'Can $1 $2'),",
			"\t\t('${3:change}_$2', 'Can $3 $2'),",
			"\t\t('${4:delete}_$2', 'Can $4 $2'),",
			"\t]",
			"\tindexes = [",
			"\t\tmodels.Index(fields=['${5:field1}'], name='$2_$5_idx'),",
			"\t\tmodels.Index(fields=['$5', '${6:field2}']),",
			"\t]",
			"\tordering = ['$5']\n",
			"\tdefault_manager_name = 'objects'",
			"\tverbose_name_plural = '${7:fieldNames}'\n",
		],
		"description": "Django, models.py, customize class Meta: ..."
	},

	"django-models-general-field": {
		"prefix": "dj-model-field",
		"body": [
			"${1:fieldName} = models.${2:XXXField}(${3:constraint}=${4:255}, null=False, blank=False$0)",
		],
		"description": "Django, models.py, field pattern"
	},

	"django-models-generate-regular": {
		"prefix": "dj-model-Custom",
		"body": [
			"class ${1:MyModel}(models.Model):",
			"\t${2:name} = models.${3:CharField}(max_length=255, null=False, blank=False)",
			"\t${4:email} = models.EmailField(max_length=255, unique=True, null=False, blank=False)",
			"\t${5:fk} = models.ForeignKey(${6:Model}, on_delete=models.CASCADE)",
			"\t${7:choice} = models.CharField(max_length=1, choices=GenreChoices.choices)\n",
			"\tdef get_absolute_url(self) -> str:",
			"\t\treturn reverse('${8:app_ns}:${9:rout_path}', kwargs={'pk':self.pk})\n",
			"\tdef __str__(self) -> str:",
			"\t\treturn self.$2$0\n",
		],
		"description": "Django, models.py, customize models"
	},

	"django-models-generate-slug": {
		"prefix": "dj-model-Slugify",
		"body": [
			"from django.utils.text import slugify",
			"from django.urls import reverse\n",
			"slug = models.SlugField(blank=True, default='')\n",
			"def save(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\tself.slug = slugify(self.${1:field})",
			"\tsuper(${2:MyModel},self).save()\n",
			"def get_absolute_url(self) -> str:",
			"\treturn reverse$0('${3:app_ns}:${4:route}', args=[str(self.slug)])\n",
			"def __str__(self) -> str:",
			"\treturn self.name\n",
		],
		"description": "Django, models.py, models, include slug field"
	},

	"django-models-change-log": {
		"prefix": "dj-signal-Model",
		"body": [
			"class ModelChangeLog(models.Model):",
			"\tuser = models.ForeignKey(User, null=True, blank=True, on_delete=models.SET_NULL, )",
			"\tmodel_name = models.CharField(max_length=100)",
			"\taction = models.CharField(max_length=10)  # 'created', 'updated', 'deleted'",
			"\ttimestamp = models.DateTimeField(auto_now_add=True)",
			"\tchanged_data = models.TextField(null=True, blank=True)",
		],
		"description": "Django, models.py, signal model tracks changes"
	},

	"django-filter-normal": {
		"prefix": "dj-Nfilter",
		"body": [
			"class ${1:Product}Filter(django_filters.FilterSet):",
			"\tname = django_filters.CharFilter(lookup_expr='${2:iexact}')\n",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = {",
			"\t\t\t'${3:title}' : ['istartswith'],",
			"\t\t\t'${4:author__name}' : ['icontains'],",
			"\t\t\t'${5:genre}' : ['exact'],",
			"\t\t\t'${6:price}' : ['lt','gt'],",
			"\t\t\t'${7:release_date}': ['exact', 'year__gt'],",
			"\t\t}\n",
		],
		"description": "Django, filters.py, Model Filter"
	},

	"django-filter-override": {
		"prefix": "dj-Sfilter",
		"body": [
			"class ${1:Product}Filter(django_filters.FilterSet):\n",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = {",
			"\t\t\t'name': ['exact'],",
			"\t\t\t'release_date': ['isnull'],",
			"\t\t}",
			"\t\tfilter_overrides = {",
			"\t\t\tmodels.CharField: {",
			"\t\t\t\t'filter_class': django_filters.CharFilter,",
			"\t\t\t\t'extra': lambda f: {",
			"\t\t\t\t\t'lookup_expr': 'icontains',",
			"\t\t\t\t},",
			"\t\t\t},",
			"\t\t\tmodels.BooleanField: {",
			"\t\t\t\t'filter_class': django_filters.BooleanFilter,",
			"\t\t\t\t'extra': lambda f: {",
			"\t\t\t\t\t'widget': forms.CheckboxInput,",
			"\t\t\t\t},",
			"\t\t\t},",
			"\t\t}",
		],
		"description": "Django, filters.py, Model Filter override"
	},

	"django-channels-websocket-consumers": {
		"prefix": "dj-channel-Consumer",
		"body": [
			"from channels.generic.websocket import AsyncWebsocketConsumer\n",
			"class ${1:My}Consumer(AsyncWebsocketConsumer):",
			"async def connect(self) -> None:",
			"\tawait self.accept()",
			"\tfor _ in range(${2:1_000}):",
			"\t\tawait self.send(json.dumps({'value': random.randint(-20, 20)}))",
			"\t\tawait asyncio.sleep(1)",
		],
		"description": "Django, consumers.py, channels, construct WebsocketConsumer class"
	},

	"django-channels-websocket-routing": {
		"prefix": "dj-channel-UrlPatterns",
		"body": [
			"from django.urls import path",
			"from . import consumers\n",
			"ws_urlpatterns = [",
			"\tpath('ws/graph/', consumers.${1:My}Consumer.as_asgi(), path='ws_graph'),",
			"]",
		],
		"description": "Django, routing.py, channels, ws_urlpatterns"
	},

	"django-scripts-aggfunc": {
		"prefix": "dj-orm-aggfunctypes",
		"body": [
			"from django.db.models import F, Q, Value",
			"from django.db.models.functions import Upper\n",
		],
		"description": "Django, scripts/xxx_script.py, aggfunc types"
	},

	"django-scripts-function": {
		"prefix": "dj-runscript",
		"body": [
			"from django.db import connection",
			"from pprint import pprint\n",
			"def run() -> None:",
			"\t${1:objs} = ${2:MyModel}.objects.values('${1:field}', '${3:fk_field}__${4:field}').first()",
			"\tpprint($1)",
			"\tpprint(connection.queries)\n",
		],
		"description": "Django, scripts/xxx_script.py"
	},

	"django-command-generate-refresh-materialized-views": {
		"prefix": "dj-cmd-RefreshMaterializedView",
		"body": [
			"from django.db import transaction, connection",
			"class Command(BaseCommand):",
			"\thelp = 'Refresh ${1:MyModel} summaries'\n",
			"\tdef handle(self, *args, **options) -> None:",
			"\t\twith transaction.atomic():",
			"\t\t\twith connection.cursor() as cursor: ",
			"\t\t\t\tcursor.execute('REFRESH MATERIALIZED VIEW CONCURRENTLY ${2:mymodel_summaries}')\n",
		],
		"description": "Django, management/commands/refresh_summaries.py, materialized views"
	},

	"django-command-generate-dummy-password": {
		"prefix": "dj-cmd-GeneratePassword",
		"body": [
			"def generate_random_password(length: int) -> str:",
			"\twith random_state(${1:42}):",
			"\t\tcharacters=string.ascii_letters + string.digits + string.punctuation",
			"\t\tpassword=''.join(random.choice(characters) for _ in range(length))",
			"\t\treturn password",
		],
		"description": "Django, management/commands/load_xxx.py, generate random dummy password"
	},

	"django-command-generate-objects": {
		"prefix": "dj-cmd-GenerateObjects",
		"body": [
			"n = ${1:10}",
			"${2:objs} = []",
			"for _ in range(n):",
			"\t$2.append(${3:MyModel}.objects.get_or_create(",
			"\t\ttitle=fake.sentence(random.randint(4,10)),",
			"\t\tcontent=fake.paragraph(),",
			"\t\tauthor=random.choice(${4:authors})",
			"\t)[0])",
		],
		"description": "Django, management/commands/load_xxx.py, generate objects of Model"
	},

	"django-command-get-all-permissions": {
		"prefix": "dj-cmd-GetPerms",
		"body": [
			"from django.contrib import auth",
			"from django.contrib.auth import get_user_model",
			"from django.core.management.base import BaseCommand\n",
			"class Command(BaseCommand):",
			"\thelp = 'Get a list of all permissions available in the system.'\n",
			"\tdef handle(self, *args: P.args, **options: typing.Any) -> None:",
			"\t\tpermissions = set()",
			"\t\t# We create (but not persist) a temporary superuser and use it to",
			"\t\t# game the system and pull all permissions easily.",
			"\t\ttmp_superuser = get_user_model()(is_active=True, is_superuser=True)",
			"\t\t# We go over each AUTHENTICATION_BACKEND and try to",
			"\t\t# fetch a list of permissions",
			"\t\tfor backend in auth.get_backends():",
			"\t\t\tif hasattr(backend, 'get_all_permissions'):",
			"\t\t\t\tpermissions.update(backend.get_all_permissions(tmp_superuser))",
			"\t\t# Make an unique list of permissions sorted by permission name.",
			"\t\tsorted_list_of_permissions = sorted(list(permissions))",
			"\t\t# Send a joined list of permissions to a command-line output.",
			"\t\tself.stdout.write('\\n'.join(sorted_list_of_permissions))\n",
		],
		"description": "Django, management/commands/get_perms.py, get the lsit of all permissions in the system"
	},

	"django-command-populate-model-table": {
		"prefix": "dj-cmd-PopulateDB",
		"body": [
			"import faker, random",
			"from django.core.management.base import BaseCommand\n",
			"class Command(BaseCommand):",
			"\thelp = '${1:Populate a simple table with sample data}'\n",
			"\tdef add_arguments(self, parser) -> None:",
			"\t\tparser.add_argument('count', type=int, help='Number of test data instances to create')\n",
			"\tdef handle(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\t\tself.stdout.write(self.style.NOTICE('Data loading started'))",
			"\t\tcount = kwargs['count']",
			"\t\tif count <= 0:",
			"\t\t\tself.stdout.write(self.style.WARNING('Count must be a positive integer'))",
			"\t\t\treturn",
			"\t\tfake = faker.Faker()",
			"\t\t${2:n} = ${3:count}",
			"\t\t${4:objs} = []",
			"\t\tfor _ in range($2):",
			"\t\t\t$4.append(${5:MyModel}.objects.get_or_create(",
			"\t\t\t\t${6:name}=fake.$6(),",
			"\t\t\t\t${7:email}=fake.$7(),",
			"\t\t\t\t${8:date}=fake.date_between(datetime.date(${9:2000},1,1), datetime.date(${10:2024},12,31)),",
			"\t\t\t\t${11:city}=fake.city()",
			"\t\t\t\t${12:product_code}=fake.lexify(text='???').upper() + fake.numerify(text='##'),",
			"\t\t\t\ttitle=fake.sentence(random.randint(4,10)),",
			"\t\t\t\tdescription=fake.paragraph()),",
			"\t\t\t)[0])",
			"\t\tself.stdout.write(self.style.SUCCESS('Data loaded successfully'))\n",
		],
		"description": "Django, management/commands/load_xxx.py, populate tables in database"
	},

	"django-command-populate-model-table-with-factoryboy": {
		"prefix": "dj-cmd-FactoryBoy",
		"body": [
			"from django.core.management.base import BaseCommand",
			"from $0.factories import ${2:${1:MyModel}Factory}\n",
			"class Command(BaseCommand):",
			"\thelp = 'Generate test data using FactoryBoy'\n",
			"\tdef add_arguments(self, parser) -> None:",
			"\t\tparser.add_argument('count', type=int, help='Number of test data instances to create')\n",
			"\tdef handle(self, *args: P.args, **options: P.kwargs) -> None:",
			"\t\tself.stdout.write(self.style.NOTICE('Start generating test data..'))",
			"\t\tcount = options['count']",
			"\t\tif count <= 0:",
			"\t\t\tself.stdout.write(self.style.WARNING('Count must be a positive integer'))",
			"\t\t\treturn",
			"\t\t$2.create_batch(count)",
			"\t\tself.stdout.write(self.style.SUCCESS(f'Successfully generated {count} instances of {$2._meta.model.__name__}'))\n",
		],
		"description": "Django, management/commands/load_xxx.py, Generate test data using FactoryBoy"
	},

	"django-factory-unique-email": {
		"prefix": "dj-Model-factoryUniqueField",
		"body": [
			"from faker import Faker",
			"fake = Faker()$0",
			"${1:email} = factory.Sequence(lambda n: f'{n}{fake.unique.$1()}')",
		],
		"description": "Django, factories.py, create a unique field in model factory"
	},

	"django-factory-factoryboy-ModelFactory": {
		"prefix": "dj-Model-factory",
		"body": [
			"import factory",
			"import factory.fuzzy\n",
			"# @factory.django.mute_signals(signals.pre_save, signals.post_save)",
			"class ${1:MyModel}Factory(factory.django.DjangoModelFactory):",
			"\tclass Meta:",
			"\t\tmodel = '${2:app_label}.$1'\n",
			"\t${3:modelField1} = factory.Faker('${4:fakeField}')",
			"\t${5:modelField2} = factory.Faker('${6:sentence}', nb_words=${7:8})",
			"\t${8:modelField3} = factory.SubFactory(${9:MyModel}Factory)",
			"\t${10:modelField4} = factory.fuzzy.FuzzyDecimal(1,200)\n",
		],
		"description": "Django, factories.py, construct DjangoModelFactory"
	},

	"django-signals-Grant-User-Group-Permission": {
		"prefix": "dj-signal-UserGroupPerms",
		"body": [
			"@receiver(signals.post_save, sender=${1:MyUserModel})",
			"def assign_group_permission(",
			"\tsender: $1,",
			"\tinstance: $1,",
			"\tcreated: bool,",
			"\t**kwargs: P.kwargs",
			") -> None:",
			"\tif created:",
			"\t\tgroup = Group.objects.get(name='${1:group_name}')",
			"\t\tinstance.groups.add(group)\n",
		],
		"description": "Django, signals.py, Grant user group permissions"
	},

	"django-signals-import": {
		"prefix": "dj-signal-Types",
		"body": [
			"from django.db.models import signals ",
			"from django.dispatch import receiver\n",
		],
		"description": "Django, signals.py, signal types"
	},

	"django-signal-handler-track-create": {
		"prefix": "dj-signal-HandlerCreate",
		"body": [
			"from .models import ${1:MyModel}",
			"from .models import ${2:ModelChangeLog}\n",
			"@receiver(signals.post_save, sender=$1)",
			"def track_model_create(sender: $1, instance: $1, created: bool, **kwargs: P.kwargs) -> None:",
			"\tif created:",
			"\t\tuser = instance._state.request.user if hasattr(instance._state, 'request') else None",
			"\t\tchanged_data = {field.name: getattr(instance, field.name) for field in instance._meta.fields}",
			"\t\t$2.objects.create(user=user, model_name=sender.__name__, action='create', changed_data=changed_data)\n",
		],
		"description": "Django, signals.py, track created instance of any other model"
	},

	"django-signal-handler-track-update": {
		"prefix": "dj-signal-HandlerUpdate",
		"body": [
			"from .models import ${1:MyModel}",
			"from .models import ${2:ModelChangeLog}\n",
			"@receiver(signals.pre_save, sender=$1)",
			"def track_model_update(sender: $1, instance: $1, **kwargs: P.kwargs) -> None:",
			"\tif not instance.pk: return",
			"\tuser = instance._state.request.user if hasattr(instance._state, 'request') else None",
			"\ttry:",
			"\t\told_instance = $1.objects.get(pk=instance.pk)",
			"\texcept sender.DoesNotExist:",
			"\t\treturn",
			"\tchanged_fields = {",
			"\t\tfield.attname: {'old_value': getattr(old_instance, field.attname), 'new_value': getattr(instance, field.attname)}",
			"\t\tfor field in instance._meta.fields",
			"\t\tif getattr(old_instance, field.attname) != getattr(instance, field.attname)",
			"\t}",
			"\tif changed_fields:",
			"\t\t$2.objects.create(user=user, model_name=sender.__name__, action='update', changed_data=changed_fields)\n",
		],
		"description": "Django, signals.py, track updated instance of any other model"
	},

	"django-signal-handler-track-delete": {
		"prefix": "dj-signal-HandlerDelete",
		"body": [
			"from .models import ${1:MyModel}",
			"from .models import ${2:ModelChangeLog}\n",
			"@receiver(signals.post_delete, sender=$1)",
			"def track_model_delete(sender: $1, instance: $1, **kwargs: P.kwargs) -> None:",
			"\tuser = instance._state.request.user if hasattr(instance._state, 'request') else None",
			"\tchanged_data = {field.name: getattr(instance, field.name) for field in instance._meta.fields}",
			"\t$2.objects.create(user=user, model_name=sender.__name__, action='delete', changed_data=changed_data)\n",
		],
		"description": "Django, signals.py, track deleted instance of any other model"
	},

	"django-app-signal-register": {
		"prefix": "dj-app-Verb6seSignalRegister",
		"body": [
			"def ready(self) -> None:",
			"\timport ${1:app_label}.signals",
		],
		"description": "Django, apps.py, register signal handlers"
	},

	"django-middleware-default-cache": {
		"prefix": "dj-middleware-defaultCache",
		"body": [
			"'django.middleware.cache.UpdateCacheMiddleware',",
		],
		"description": "Django, xxx_middleware.py, middleware class, default cache"
	},

	"django-middleware-class-async": {
		"prefix": "dj-middleware-Async",
		"body": [
			"from asgiref.sync import iscoroutinefunction, markcoroutinefunction\n",
			"class AsyncMiddleware:",
			"\tasync_capable = True",
			"\tsync_capable = False\n",
			"\tdef __init__(self, get_response: typing.Callable[P,T]) -> None:",
			"\t\tself.get_response = get_response",
			"\t\tif iscoroutinefunction(self.get_response):",
			"\t\t\tmarkcoroutinefunction(self)\n",
			"\tdef __call__(self, request) -> HttpResponse:",
			"\t\t# Code to be executed for each request before the view (and later middleware) are called",
			"\t\tresponse = self.get_response(request)",
			"\t\t# Code to be executed for each request/response after the view is called.",
			"\t\treturn response\n",
		],
		"description": "Django, xxx_middleware.py, middleware class, async"
	},

	"django-middleware-class": {
		"prefix": "dj-middleware-Class",
		"body": [
			"class ${1:Simple}Middleware:",
			"\tdef __init__(self, get_response):",
			"\t\tself.get_response = get_response",
			"\tdef __call__(self, request):",
			"\t\t# Code to be executed for each request before",
			"\t\t# the view (and later middleware) are called.",
			"\t\tresponse = self.get_response(request)",
			"\t\t# Code to be executed for each request/response after",
			"\t\t# the view is called.",
			"\t\treturn response\n",
		],
		"description": "Django, middlewares/xxx_middleware.py, middleware class template"
	},

	"django-http-types-import": {
		"prefix": "dj-httpTypes",
		"body": [
			"from django.http import (HttpRequest, HttpResponse, HttpResponseForbidden, JsonResponse, FileResponse)\n",
		],
		"description": "Django, http types, import"
	},

	"django-fbm-middlewareCustom": {
		"prefix": "dj-fbm-middlewareCustom",
		"body": [
			"def ${1:methodName}(get_response):",
			"\tdef middleware(request):",
			"\t\t# business logic here$0",
			"\t\tresponse = get_response(request)",
			"\t\treturn response",
			"\treturn middleware\n",
		],
		"description": "Django, middlewares.py, function-based-middleware, customization"
	},

	"django-cbm-middlewareCustom": {
		"prefix": "dj-cbm-middlewareCustom",
		"body": [
			"class ${1:My}MiddleWare:",
			"\tdef __init__(self, get_response):",
			"\t\tself.get_response = get_response\n",
			"\tdef __call__(self, request):",
			"\t\t# business logic here$0",
			"\t\tresponse = self.get_response(request)",
			"\t\treturn response\n",
		],
		"description": "Django, middlewares.py, class-based-middleware, customization"
	},

	"django-form-Email": {
		"prefix": "dj-form-Email",
		"body": [
			"class EmailForm(forms.ModelForm):",
			"email = forms.EmailField(label='Email', required=True)\n",
			"class Meta:",
			"\tmodel = Email",
			"\tfields = ('pk', 'email')\n",
		],
		"description": "Django, forms.py, Email Form"
	},

	"django-form-add-instance-attributes": {
		"prefix": "dj-form-AddInstanceAttributes",
		"body": [
			"class ${1:MyModel}Form(forms.ModelForm):",
			"\tclass Meta:",
			"\t\tmodel = $1\n",
			"\t\tdef __init__(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\t\t\t# set the user as an attribute of the form",
			"\t\t\tself.${2:attr} = kwargs.pop('$2')",
			"\t\t\tsuper().__init__(*args, **kwargs)\n",
		],
		"description": "Django, forms.py, add instance-level attributes"
	},

	"django-form-field-validate": {
		"prefix": "dj-form-FieldValidate",
		"body": [
			"class ${1:MyModel}Form(forms.ModelForm):",
			"\tdef __init__(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\t\tsuper().__init__(*args, **kwargs)",
			"\t\tself.fields['${2:field1}'].validators.append(${3:validate_func})",
			"\t\tself.fields['${4:field2}'].validators.append($3)",
			"\t\tself.fields['${5:field3}'].required = True",
			"\t\tself.fields['${6:field4}'].choices = [(e.slug, e.name) for e in $1.objects.all()]\n",
			"\tclass Meta:",
			"\t\tmodel = $1\n",
		],
		"description": "Django, forms.py, add validators to Form Fields"
	},

	"django-form-user-creation-form": {
		"prefix": "dj-form-UserCreationForm",
		"body": [
			"from django.contrib.auth.forms import UserCreationForm\n",
			"class ${1:MyUserModel}RegisterForm(UserCreationForm):",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = ('username', 'email', 'password1', 'password2')\n",
		],
		"description": "Django, forms.py, create UserCreationForm for customized User Model, Never Use Meta.exclude"
	},

	"django-form-user-change-form": {
		"prefix": "dj-form-UserChangeForm",
		"body": [
			"from django.contrib.auth import get_user_model\n",
			"class ${1:MyUserModel}ChangeForm(UserChangeForm):",
			"\tclass Meta:",
			"\t\tmodel = get_user_model()",
			"\t\tfields = ('email', 'username', $0)\n",
		],
		"description": "Django, forms.py, create UserChangeForm for customized User Model, Never Use Meta.exclude"
	},

	"django-form-download": {
		"prefix": "dj-form-DownloadFormat",
		"body": [
			"class ${1:MyModel}DownloadFormatForm(forms.Form):",
			"\t${2:FormatChoices} = [",
			"\t\t('csv', 'csv'),",
			"\t\t('json', 'json'),",
			"\t]",
			"\tformat = forms.ChoiceField(",
			"\t\tchoices=$2,",
			"\t\twidget=forms.Select(attrs={'class':'form-select'})",
			"\t)\n",			
		],
		"description": "Django, forms.py, download format form"
	},

	"django-form-widget-DateInput": {
		"prefix": "dj-form-Datewidget",
		"body": [
			"class DateInputWidget(forms.DateInput):",
			"\tinput_type = 'date'",
		],
		"description": "Django, forms.py, ModelForm, DateTimePicker Widget"
	},

	"django-form-class-modelform": {
		"prefix": "dj-form-Custom",
		"body": [
			"class ${1:MyModel}${2:What}Form(forms.ModelForm):",
			"\t${3:title} = forms.CharField(label='$3', widget=forms.TextInput(attrs={'class':'form-control'}))",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = ['$3',$0]\n",
		],
		"description": "Django, forms.py, regular ModelForm"
	},

	"django-form-class-custom": {
		"prefix": "dj-form-Smodelform",
		"body": [
			"class ${1:MyModel}Form(forms.ModelForm):",
			"\t${2:title} = forms.CharField(label='$2', widget=forms.TextInput(attrs={'class':'form-control'}))\n",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = ['$2','${3:createdDate}']",
			"\t\twidgets = {",
			"\t\t\t'$2': forms.TextInput(attrs={'cols':80,'rows':20}),",
			"\t\t\t'$3': DateInputWidget(),",
			"\t\t}\n",
			"\tdef clean_${4:field}(self) -> typing.Any:",
			"\t\tdata = self.cleaned_data['$4']",
			"\t\t# do one-to-one field validation here$5",
			"\t\treturn data\n",
			"\tdef clean(self) -> typing.Any:",
			"\t\tcleaned_data = super().clean()",
			"\t\t# do one-to-many fields validation here",
			"\t\tif ${6:condi}:",
			"\t\t\tself.add_error(${7:field}, '${8:msg}')",
			"\t\treturn cleaned_data\n",
		],
		"description": "Django, forms.py, customize ModelForm and FormField validation, note: full_clean() is called by django automatically"
	},

	"django-form-formset": {
		"prefix": "dj-form-FormSet",
		"body": [
			"class ${1:MyModel}FormSet(BaseModelFormSet):",
			"\tdef clean(self):",
			"\t\tsuper().clean()\n",
			"\t\tfor form in self.forms:",
			"\t\t\tname = form.cleaned_data['name'].upper()",
			"\t\t\tform.cleaned_data['name'] = name",
			"\t\t\t# update the instance value.",
			"\t\t\tform.instance.name = name\n",
		],
		"description": "Django, forms.py, generate ModelFormSet"
	},

	"django-views-CBV-Email": {
		"prefix": "dj-cbv-EmailView",
		"body": [
			"from django.views.generic import ListView, FormView",
			"from django.core.mail import send_mail, EmailMultiAlternatives",
			"from django.template.loader import render_to_string",
			"from django.utils.html import strip_tags",
			"from django.contrib.auth import get_user_model\n",
			"class BasicEmailView(ListView, FormView):",
			"\ttemplate_name = 'content/home.html'",
			"\tcontext_object_name = '${1:mydata}'",
			"\tmodel = Email",
			"\tform_class = EmailForm",
			"\tsuccess_url = '/'\n",
			"\tdef form_valid(self, form):",
			"\t\tmy_subject = 'Email from our Django App'",
			"\t\tmy_recipient = form.cleaned_data['email']",
			"\t\tUser = get_user_model()",
			"\t\tif User.objects.filter(email=my_recipient).exists():",
			"\t\t\tuser = User.objects.get(email=my_recipient)",
			"\t\t\twelcome_message = f'Welcome {user.first_name} {user.last_name}!'",
			"\t\telse: ",
			"\t\t\twelcome_message = 'You have been invited to use our app!'",
			"\t\tlink_app = 'http://localhost:8000'",
			"\t\tcontext = {",
			"\t\t\t'welcome_message': welcome_message,",
			"\t\t\t'link_app': link_app",
			"\t\t}",
			"\t\thtml_message = render_to_string('content/email.html', context=context)",
			"\t\tplain_message = strip_tags(html_message)",
			"\t\tmessage = EmailMultiAlternatives(",
			"\t\t\tsubject = my_subject,",
			"\t\t\tbody = plain_message,",
			"\t\t\tfrom_email = None,",
			"\t\t\tto= [my_recipient]",
			"\t\t)",
			"\t\tmessage.attach_alternative(html_message, 'text/html')",
			"\t\tmessage.send()",
			"\t\tobj = Email(",
			"\t\t\tsubject = my_subject,",
			"\t\t\tmessage = 'We have send this email',",
			"\t\t\temail = my_recipient",
			"\t\t)",
			"\t\tobj.save()",
			"\t\treturn super().form_valid(form)",
		],
		"description": "Django, views.py, Email View"
	},

	"django-views-export-queryset-as-csv": {
		"prefix": "dj-fbv-ExportToCsv",
		"body": [
			"import csv\n",
			"def ${1:export_data_as_csv}(request: HttpRequest) -> HttpResponse:",
			"\tqueryset = ${2:MyModel}.objects.all()",
			"\tresponse = HttpResponse(content_type='text/csv')",
			"\tresponse['Content-Disposition'] = 'attachment; filename=\"data.csv\"'",
			"\twriter = csv.writer(response)",
			"\twriter.writerow([field.name for field in $2._meta.fields])",
			"\tfor obj in queryset:",
			"\t\twriter.writerow([getattr(obj, field.name) for field in $2._meta.fields])",
			"\treturn response",
		],
		"description": "Django, views.py, export QuerySet as .csv without Django-Import-Export dependencies"
	},

	"django-views-silk-profiling-decorator": {
		"prefix": "dj-fbv-SilkDecorator",
		"body": [
			"from silk.profiling.profiler import silk_profile\n",
			"@silk_profile(name='${1:View} ${2:App} ${3:Model}')",
		],
		"description": "Django, views.py, silk profiling decorator against post(...) function"
	},

	"django-views-query-bySlug": {
		"prefix": "dj-fbv-BySlug",
		"body": [
			"from django.shortcuts import get_object_or_404\n",
			"def detail(request: HttpRequest, slug: str=None) -> HttpResponse:",
			"\t${1:ob} = get_object_or_404(${2:Model}, slug=${3:slug})",
			"\treturn render(request, ${4:template}, ${5:data})\n",
		],
		"description": "Django, views.py, query by slug"
	},

	"django-views-FBV-Favicon": {
		"prefix": "dj-fbv-Favicon",
		"body": [
			"from django.conf import settings",
			"from django.views.decorators.cache import cache_control",
			"from django.views.decorators.http import require_GET\n",
			"@require_GET",
			"@cache_control(max_age=60 * 60 * 24, immutable=True, public=True)",
			"def favicon(request: HttpRequest) -> HttpResponse:",
			"\tfile = (settings.BASE_DIR / '${1:core/static/img/favicons/favicon.ico}').open('rb')",
			"\treturn FileResponse(file)\n",
		],
		"description": "Django, views.py, serve favicon, why: `staticfiles` only serves files from within the `STATIC_URL` prefix, like `static/`; Thus staticfiles can only serve `/static/favicon.ico`, whilst the favicon needs to be served at exactly `/favicon.ico`"
	},

	"django-views-FBV-JsonResponse": {
		"prefix": "dj-fbv-JsonResponse",
		"body": [
			"from django.core.serializers import serialize\n",
			"def get${1:MyModel}JsonData$0(request: HttpRequest) -> HttpResponse:",
			"\tqs = $1.objects.all().order_by('$2')",
			"\t# more business logic here",
			"\t${3:field} = request.GET.get('$3')",
			"\tif $3:",
			"\t\tqs = qs.filter($3__${4:icontains}=$3)",
			"\tserialized = serialize('json', qs)",
			"\treturn JsonResponse(serialized, safe=False)\n",
		],
		"description": "Django, views.py, JsonResponse"
	},

	"django-views-CBV-JsonResponse": {
		"prefix": "dj-cbv-JsonResponse",
		"body": [
			"class ${1:MyModel}ApiView(LoginRequiredMixin,View):",
			"\tdef post(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\t# logic goes here",
			"\t\treturn JsonResponse({})\n",
			"\tdef get(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\t# logic goes here",
			"\t\treturn JsonResponse({})\n",
			"\tdef put(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\t# logic goes here",
			"\t\treturn JsonResponse({})\n",
			"\tdef delete(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\t# logic goes here",
			"\t\treturn JsonResponse({})\n",
		],
		"description": "Django, views.py, JsonResponse"
	},

	"django-views-CBV-UpdateView-Add-Form-Instance-Attributes": {
		"prefix": "dj-cbv-UpdateAddInstanceAttributes",
		"body": [
			"class ${1:MyModel}UpdateView(UpdateView):",
			"\tmodel = $1",
			"\tform_class = $1Form\n",
			"\tdef get_form_kwargs(self) -> dict[str,typing.Any]:",
			"\t\t# This method is what injects forms with keyword arguments",
			"\t\t# grab the current set of form #kwargs",
			"\t\tkwargs = super().get_form_kwargs()",
			"\t\t# Update the kwargs with the user_id",
			"\t\tkwargs['${2:user}'] = self.request.user",
			"\t\treturn kwargs\n",
		],
		"description": "Django, views.py, Add Instance Attributes"
	},

	"django-views-CBV-SearchMixin": {
		"prefix": "dj-cbv-SearchMixin",
		"body": [
			"class ${1:MajorQualityCase}SearchMixin:",
			"\tdef get_queryset(self) -> models.QuerySet:",
			"\tqueryset = super().get_queryset()",
			"\tq = self.request.GET.get('q')",
			"\tif q:",
			"\t\treturn queryset.filter(${2:title}__${3:icontains}=q)",
			"\treturn queryset\n",
		],
		"description": "Django, views.py, SearchMixin, used in ListView"
	},

	"django-views-CBV-PermissionRequiredMixin": {
		"prefix": "dj-cbv-PermissionRequiredMixinCustom",
		"body": [
			"class ${1:MajorQualityCase}PermissionRequiredMixin(PermissionRequiredMixin):",
			"\t@property",
			"\tdef group_name(self) -> (str|None):",
			"\t\traise NotImplemented\n",
			"\t@property",
			"\tdef perm(self) -> (str|None):",
			"\t\traise NotImplemented\n",
			"\t@property",
			"\tdef forbidden_template(self) -> (str|None):",
			"\t\traise NotImplemented\n",
			"\tdef has_permission(self) -> bool:",
			"\t\treturn self.request.user.has_perm(self.perm)\n",
			"\tdef handle_no_permission(self) -> HttpResponseForbidden:",
			"\t\ttemplate = loader.get_template(self.forbidden_template)",
			"\t\treturn HttpResponseForbidden(template.render())\n",
			"\tdef dispatch(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\tif not self.has_permission():",
			"\t\t\treturn self.handle_no_permission()",
			"\t\treturn super().dispatch(request, *args, **kwargs)\n",
		],
		"description": "Django, views.py, customize PermissionRequiredMixin"
	},

	"django-views-CBV-ActionMixin": {
		"prefix": "dj-cbv-ActionMixinCustom",
		"body": [
			"from django.contrib.messages.views import SuccessMessageMixin",
			"from django.utils import functional",
			"from django.contrib import messages\n",
			"class ${1:MyModel}${2:Action}Mixin:",
			"\tdef get_context_data(self, **kwargs: P.kwargs) -> dict[str,typing.Any]:",
			"\t\tcontext = super().get_context_data(**kwargs)",
			"\t\t# add more context data here",
			"\t\treturn context\n",
			"\t@property",
			"\tdef success_message(self) -> (str|None):",
			"\t\traise NotImplemented\n",
			"\tdef form_valid(self, form: typing.Any) -> typing.Any:",
			"\t\tresponse = super().form_valid(form)",
			"\t\tsuccess_message = self.get_success_message(form.cleaned_data)",
			"\t\tif success_message:",
			"\t\t\tmessages.success(self.request, success_message)",
			"\t\treturn response\n",
			"\tdef form_invalid(self, form: typing.Any) -> typing.Any:",
			"\t\t# TODO: Serialize, Save invalid form and model data for later reference",
			"\t\treturn super().form_invalid(form)\n",
			"\tdef get_success_message(self, cleaned_data: typing.Any) -> (str|None):",
			"\t\treturn self.success_message % cleaned_data\n",
			"\t@functional.cached_property",
			"\tdef ${3:func}(self) -> dict[str,typing.Any]:",
			"\t\t# construct parts of a context object",
			"\t\tlikes = self.objects.likes()",
			"\t\tfavorites = self.objects.favorites()",
			"\t\treturn {",
			"\t\t\t'likes' : likes,",
			"\t\t\t'favorites' : favorites,",
			"\t\t\t'favorites_count' : favorites.count(),$0",
			"\t\t}\n",
		],
		"description": "Django, views.py, customize Message or Any Action Mixin by intercepting get_context_data(), form_valid(), django also implemented SuccessMessageMixin"
	},

	"django-views-FBV-decorator-custom": {
		"prefix": "dj-fbv-DecoratorCustom",
		"body": [
			"${1:_T} = typing.TypeVar('$1', [HttpRequest, P.args, P.kwargs])\n",
			"def ${2:myview}decorator(view_func: typing.Callable[$1,HttpResponse]) -> typing.Callable[$1,HttpResponse]:",
			"\t@functools.wraps(view_func)",
			"\tdef new_view_func(request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\t# You can modify the request (HttpRequest) object here.",
			"\t\tresponse = view_func(request, *args, **kwargs)",
			"\t\t# You can modify the response (HttpResponse) object here.",
			"\t\treturn response",
			"\treturn new_view_func\n",
		],
		"description": "Django, views.py, decorator"
	},

	"django-views-FBV-atomic-request-granular-control": {
		"prefix": "dj-fbv-AtomicTransation",
		"body": [
			"def ${1:atomic_method}(request: HttpRequest) -> HttpResponse:",
			"\tobj = get_object_or_404(pk=request.GET.get('pk'))",
			"\t# This will execute in autocommit mode (Django's default).",
			"\tobj.save()",
			"\twith transaction.atomic():",
			"\t\t# This code executes inside a transaction.",
			"\t\t...",
			"\t\treturn HttpResponse('success')",
			"\t# If the transaction fails, return the appropriate status",
			"\treturn HttpResponse('failed', status_code=404)\n",
		],
		"description": "Django, views.py, with transation.atomic(), to do granular control over request"
	},

	"django-views-FBV-non-atomic-request": {
		"prefix": "dj-fbv-NonAtomic",
		"body": [
			"from django.db import transaction\n",
			"@transaction.non_atomic_requests",
		],
		"description": "Django, views.py, when writing views that create/update/delete records but interact with non-database items,"
	},

	"django-views-CBV-non-atomic-request": {
		"prefix": "dj-cbv-NonAtomic",
		"body": [
			"from django.db import transaction",
			"from django.utils.decorators import method_decorator\n",
			"@method_decorator(transaction.non_atomic_requests, name='${1:dispatch}')",
		],
		"description": "Django, views.py, when writing views that create/update/delete records but interact with non-database items,"
	},

	"django-views-track-recently-viewed": {
		"prefix": "dj-fbv-Recentlyviewed",
		"body": [
			"def track_recently_viewed(request: HttpRequest, pk: int) -> HttpResponse:",
			"\trecently_viewed_objs = None",
			"\trecently_viewed: list[int] = []",
			"\tif 'recently_viewed' in request.session:",
			"\t\trecently_viewed = request.session.get('recently_viewed')",
			"\t\tif pk in recently_viewed:",
			"\t\t\trecently_viewed.remove(pk)",
			"\t\tobjs = MyModel.objects.filter(pk__in=recently_viewed)",
			"\t\trecently_viewed_objs = sorted(objs, key=lambda e: recently_viewed.index(e.pk))",
			"\t\trecently_viewed.insert(0, pk)",
			"\t\tif (len(recently_viewed) > 5):",
			"\t\t\trecently_viewed.pop()",
			"\telse:",
			"\t\trecently_viewed = [pk]",
			"\trequest.session.modified = True",
			"\treturn render(request, '${1:path/to/template}.html', context={'recently_viewed_objs':recently_viewed_objs})\n",
		],
		"description": "Django, views.py, track-recently-viewed"
	},

	"django-views-class-based-view-LoginRequired": {
		"prefix": "dj-cbv-LoginRequired",
		"body": [
			"def has_permission(self) -> bool:",
			"\treturn self.request.user.has_perm('mqc.can_delete_page')\n",
			"def handle_no_permission(self) -> HttpResponseForbidden:",
			"\ttemplate = loader.get_template('core/mqc/forbidden.html')",
			"\treturn HttpResponseForbidden(template.render())\n",
			"def dispatch(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\tif not self.has_permission():",
			"\t\treturn self.handle_no_permission()",
			"\treturn super().dispatch(request, *args, **kwargs)\n",
		],
		"description": "Django, views.py, LoginRequired"
	},

	"django-views-class-based-view-PermissionRequired": {
		"prefix": "dj-cbv-PermissionRequired",
		"body": [
			"\tdef get_login_url(self) -> str:",
			"\t\treturn reverse_lazy$0('${1:app_ns}:${2:route}')\n",
		],
		"description": "Django, views.py, PermissionRequired"
	},

	"django-views-class-based-view-messages": {
		"prefix": "dj-cbv-Messages",
		"body": [
			"def form_valid(self, form) -> HttpResponse:",
			"\tmessages.success(self.request, '${1:deleted} successfully')",
			"\treturn super().form_valid(form)\n",
		],
		"description": "Django, views.py, messages for Create, Upate, Delete"
	},

	"django-views-class-based-view-Detail": {
		"prefix": "dj-cbv-Detail",
		"body": [
			"class ${1:MyModel}DetailView(DetailView):",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tmodel = $1\n",
			"\tdef get_object(self) -> models.base.Model:",
			"\t\tpk = self.kwargs.get('pk')",
			"\t\treturn get_object_or_404$0(self.model, id=pk)\n",
		],
		"description": "Django, views.py, DetailView"
	},

	"django-views-class-based-view-Create": {
		"prefix": "dj-cbv-Create",
		"body": [
			"class ${1:MyModel}CreateView(CreateView):",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tform_class = ${3:$1Form}\n",
			"\tdef form_valid(self, form) -> HttpResponse:",
			"\t\tmessages.success(self.request, 'Created successfully')",
			"\t\treturn super().form_valid(form)\n",
		],
		"description": "Django, views.py, CreateView"
	},

	"django-views-class-based-view-Update": {
		"prefix": "dj-cbv-Update",
		"body": [
			"class ${1:MyModel}UpdateView(UpdateView):",
			"\tmodel = $1",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tform_class = $1Form\n",
			"\tdef get_object(self) -> models.base.Model:",
			"\t\tpk = self.kwargs.get('pk')",
			"\t\treturn get_object_or_404(self.model, id=pk)\n",
			"\tdef get_success_url(self) -> str:",
			"\t\treturn reverse$0('${3:app_ns}.${4:route}', kwargs={'pk':self.object.pk})\n",
		],
		"description": "Django, views.py, UpdateView"
	},

	"django-views-class-based-view-Delete": {
		"prefix": "dj-cbv-Delete",
		"body": [
			"from django.template import loader\n",
			"class ${1:MajorQualityCase}DeleteView(DeleteView):",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tmodel = $1\n",
			"\tdef get_object(self) -> models.base.Model:",
			"\t\tpk = self.kwargs.get('pk')",
			"\t\treturn get_object_or_404(self.model, id=pk)\n",
			"\tdef get_success_url(self) -> str:",
			"\t\treturn reverse$0('${3:app_ns}.${4:route}')\n",
		],
		"description": "Django, views.py, DeleteView"
	},

	"django-views-FBV-download-filtered-noJQuery": {
		"prefix": "dj-fbv-DownloadFiltered-noJQuery",
		"body": [
			"import csv\n",
			"def _getDownloadResponse(qs: models.QuerySet, *model_headers: tuple[str]) -> HttpResponse:",
			"\tresponse = HttpResponse(content_type='text/csv; charset=utf-8')",
			"\tresponse['Content-Disposition'] = 'attachment; filename=\"data.csv\"'",
			"\twriter = csv.writer(response)",
			"\twriter.writerow(model_headers)",
			"\tfor e in qs: writer.writerow([getattr(e,f) for f in model_headers])",
			"\treturn response\n",
			"def download${1:Model}s(request: HttpRequest) -> HttpResponse:",
			"\tqs = $1.objects.none()",
			"\tfields = 'field1', 'field2',",
			"\tif 'dl' not in request.GET:        ",
			"\t\treturn _getDownloadResponse(qs, fields)",
			"\t${2:field} = request.GET.get('$2')",
			"\tif not $2:",
			"\t\treturn _getDownloadResponse(qs, fields)",
			"\tqs = Post.objects.filter($2__${3:icontains}=$2)",
			"\treturn _getDownloadResponse(qs, fields)\n",
			"from django.core.paginator import Paginator\n",
			"def ${1:MyModel}_filter_ListView$0(request: HttpRequest) -> HttpResponse:",
			"\tform = $1FilterForm(request.GET or None)",
			"\tqs = None",
			"\tpaginated_by = ${2:5}",
			"\tpage_obj = None",
			"\tpage_dat = None",
			"\tif form.is_valid():",
			"\t\t${3:field1} = form.cleaned_data.get('$3')",
			"\t\tif $3:",
			"\t\t\tqs = $1.objects.filter($3__icontains=$3).order_by('${4:field2}')",
			"\t\t\tpaginator = Paginator(qs, paginated_by)",
			"\t\t\tpage_num = request.GET.get('page')",
			"\t\t\tpage_obj = paginator.get_page(page_num)",
			"\t\t\tpage_dat = page_obj.object_list",
			"\tif 'download' in request.GET:",
			"\t\t$3 = request.GET.get('$3')",
			"\t\tif $3:",
			"\t\t\tqs = $1.objects.filter($3__icontains=$3)",
			"\t\treturn _getDownloadResponse(qs, '$3', '${5:field2}', '${6:field3}')",
			"\treturn render(request, '${7:path/to/template}.html', {'form':form,'object_list':page_dat,'page_obj':page_obj})\n",
		],
		"description": "Django, views.py, using built-in to build Filter + Download mixin (raw django w/o jQuery)"
	},

	"django-views-FBV-download-filtered-JQuery": {
		"prefix": "dj-fbv-DownloadFiltered-JQuery",
		"body": [
			"import csv\n",
			"def _getDownloadResponse(qs: models.QuerySet, *model_headers: tuple[str]) -> HttpResponse:",
			"\tresponse = HttpResponse(content_type='text/csv; charset=utf-8')",
			"\tresponse['Content-Disposition'] = 'attachment; filename=\"data.csv\"'",
			"\twriter = csv.writer(response)",
			"\twriter.writerow(model_headers)",
			"\tfor e in qs: writer.writerow([getattr(e,f) for f in model_headers])",
			"\treturn response\n",
			"def download${1:Model}s(request: HttpRequest) -> HttpResponse:",
			"\tqs = $1.objects.${2|all,none|}()",
			"\tfields = '${3:field1}', '${4:field2}',$0",
			"\tif 'dl' not in request.GET:",
			"\t\treturn _getDownloadResponse(qs.none(), *fields)",
			"\t${5:field} = request.GET.get('$5')",
			"\tif not $5:",
			"\t\treturn _getDownloadResponse(qs.none(), *fields)",
			"\tqs = $1.objects.filter($5__${6:icontains}=$5)",
			"\treturn _getDownloadResponse(qs, *fields)\n",
		],
		"description": "Django, views.py, using HttpResponse + jQuery)"
	},

	"django-views-CBV-download-filtered": {
		"prefix": "dj-cbv-DownloadFiltered",
		"body": [
			"class ${1:MyModel}FilterListView(ListView, FormView):",
			"\tqueryset = $1.objects.all()",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tcontext_object_name = '${3:$1s}'",
			"\tform_class = ${4:$1DownloadFormatForm}",
			"\t#permission_required = '$1.${5:perms_name}'",
			"\tpaginate_by = ${6:10}\n",
			"\tdef get_queryset(self) -> models.QuerySet:",
			"\t\tqueryset = super().get_queryset()",
			"\t\tself.filterset = $1Filter(self.request.GET, queryset=queryset)",
			"\t\treturn self.filterset.qs\n",
			"\tdef get_context_data(self, **kwargs: P.kwargs) -> dict[str, typing.Any]:",
			"\t\tcontext = super().get_context_data(**kwargs)",
			"\t\tcontext['${7:filterform}'] = self.filterset.form",
			"\t\treturn context\n",
			"\tdef post(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\tLIMIT = 100",
			"\t\tqs = self.get_queryset()[:LIMIT]",
			"\t\tdataset = $1Resource().export(qs)",
			"\t\tformat = request.POST.get('format')",
			"\t\tmatch format:",
			"\t\t\tcase 'csv':",
			"\t\t\t\tds = dataset.csv",
			"\t\t\tcase 'xls':",
			"\t\t\t\tds = dataset.xls",
			"\t\t\tcase _:",
			"\t\t\t\tds = dataset.json",
			"\t\tresponse = HttpResponse(ds, content_type=format)",
			"\t\tresponse['Content-Disposition'] = f'attachment; filename=data.{format}'",
			"\t\treturn response\n",
		],
		"description": "Django, views.py, FilterDownloadView(ListView + FormView)"
	},

	"django-views-CBV-download": {
		"prefix": "dj-cbv-Download",
		"body": [
			"class ${1:MyModel}ListView(ListView, FormView):",
			"\tmodel = $1",
			"\tqueryset = $1.objects.all()",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tcontext_object_name = '${3:books}'",
			"\tpaginate_by = ${4:10}",
			"\tform_class = ${5:$1DownloadFormatForm}\n",
			"\tdef post(self, request: HttpRequest, *args: P.args, **kwargs: P.kwargs) -> HttpResponse:",
			"\t\tLIMIT = 100",
			"\t\tqs = self.get_queryset()[:LIMIT]",
			"\t\tdataset = $1Resource().export(qs)",
			"\t\tformat = request.POST.get('format')",
			"\t\tdataset.export(format)",
			"\t\tmatch format:",
			"\t\t\tcase 'xls':",
			"\t\t\t\tds = dataset.xls",
			"\t\t\tcase 'csv':",
			"\t\t\t\tds = dataset.csv",
			"\t\t\tcase _:",
			"\t\t\t\tds = dataset.json",
			"\t\tresponse = HttpResponse(ds, content_type=f'{format}')",
			"\t\tresponse['Content-Disposition'] = f'attachment; filename=data.{format}'",
			"\t\treturn response\n",
		],
		"description": "Django, views.py, DownloadView(ListView + FormView)"
	},

	"django-views-messages-register": {
		"prefix": "dj-message-register",
		"body": [
			"messages.${1:success}(request, '${2:message}')",
		],
		"description": "Django, views.py, messages registration"
	},

	"django-views-FBV-auth": {
		"prefix": "dj-authFunc",
		"body": [
			"from django.contrib.auth import authenticate, login, logout\n"
		],
		"description": "Django, views.py, auth functions"
	},

	"django-views-FBV-user": {
		"prefix": "dj-fbv-UserRLL",
		"body": [
			"# Register",
			"$1",
			"# Login",
			"$2",
			"# Logout",
			"$3",
		],
		"description": "Django, views.py, user register + login + logout"
	},

	"django-views-FBV-user-register": {
		"prefix": "dj-fbv-UserRegister",
		"body": [
			"def register(request: HttpRequest) -> HttpResponse:",
			"\tif request.method == 'POST':",
			"\t\tform = ${1:AppUserRegisterForm}(request.POST or None)",
			"\t\tif form.is_valid():",
			"\t\t\tform.save()",
			"\t\t\tmessages.success(request, 'Your account has been created! You are now able to login')",
			"\t\t\treturn redirect('${2:app_ns}:${3:rout_path}')",
			"\telse:",
			"\t\tform = $1()",
			"\treturn render(request, '${4:path/to/template}.html', context={'form':form})\n",
		],
		"description": "Django, views.py, user register"
	},

	"django-views-FBV-user-login": {
		"prefix": "dj-fbv-UserLogin",
		"body": [
			"from django.contrib.auth.views import LoginView",
			"login = LoginView.as_view(template_name='${1:path/to/template}.html')\n",
		],
		"description": "Django, views.py, user login"
	},

	"django-views-FBV-user-logout": {
		"prefix": "dj-fbv-UserLogout",
		"body": [
			"from django.contrib import auth",
			"from django.contrib.auth.decorators import login_required\n",
			"@login_required",
			"def logout(request: HttpRequest) -> HttpResponse:",
			"\tauth.logout(request)",
			"\treturn render(request, '${1:path/to/template}.html')\n",
		],
		"description": "Django, views.py, user logout"
	},

	"django-views-FBV-generic": {
		"prefix": "dj-pobm",
		"body": [
			"def ${1:methodName}(request: HttpRequest) -> HttpResponse:",
			"\treturn render(request, '${2:path/to/template}.html', context={$3})\n",
		],
		"description": "Django, views.py, generic FBV view"
	},

	"django-views-FBV-create": {
		"prefix": "dj-fbv-Create",
		"body": [
			"def create(request: HttpRequest) -> HttpResponse:",
			"\tif request.method == 'POST':",
			"\t\t${1:form} = ${2:MyForm}(request.POST or None)",
			"\t\tif $1.is_valid():",
			"\t\t\t$1.save()",
			"\t\t\treturn HttpResponseRedirect('/')",
			"\telse:",
			"\t\t$1 = $2()",
			"\treturn render(request, '${3:path/to/template}.html', {'form':$1})\n",
		],
		"description": "Django, views.py, FBV, create view (form)"
	},

	"django-views-FBV-edit": {
		"prefix": "dj-fbv-Edit",
		"body": [
			"def edit(request: HttpRequest, pk: int=None) -> HttpResponse:",
			"\t${1:obj} = get_object_or_404(${2:MyModel}, pk=pk)",
			"\tif request.method == 'POST':",
			"\t\tform = ${3:MyForm}(request.POST or None, instance=$1)",
			"\t\tif form.is_valid():",
			"\t\t\tform.save()",
			"\t\t\treturn HttpResponseRedirect('/')",
			"\telse:",
			"\t\tform = $3(instance=$1)",
			"\treturn render(request, '${4:path/to/template}.html', {'form':form})\n",
		],
		"description": "Django, views.py, FBV, edit view (form)"
	},

	"django-views-FBV-delete": {
		"prefix": "dj-fbv-Delete",
		"body": [
			"def delete(request: HttpRequest, ${1:pk}: int=None) -> HttpResponse:",
			"\t${2:obj} = get_object_or_404(${3:MyModel}, pk=$1)",
			"\t$2.delete()",
			"\treturn render(request, '${3:path/to/template}.html')\n",
		],
		"description": "Django, views.py, FBV, delete view"
	},

	"django-views-FBV-Detail": {
		"prefix": "dj-fbv-Detail",
		"body": [
			"def detail(request: HttpRequest, ${1:pk}: int=None) -> HttpResponse:",
			"\t${2:obj} = get_object_or_404(${3:MyModel}, pk=$1)",
			"\treturn render(request, '${4:path/to/template}.html', context={'obj':$2})\n",
		],
		"description": "Django, views.py, FBV, Detail"
	},

	"django-views-FBV-auth-permissions": {
		"prefix": "dj-fbv-AuthPerms",
		"body": [
			"from django.contrib.auth.decorators import permission_required, login_required\n",
			"@permission_required('${1:myapp}.${2:add_flower}')",
			"def func(request: HttpRequest) -> HttpResponse:",
			"\t...\n",
		],
		"description": "Django, views.py, decorate CRUD funcs with permissions"
	},

	"django-views-CBV-types": {
		"prefix": "dj-ViewTypes",
		"body": [
			"from django.views.generic import (CreateView, UpdateView, DetailView, DeleteView, ListView, FormView)\n",
		],
		"description": "Django, views.py, generic View types"
	},

	"django-views-CBV-TemplateView": {
		"prefix": "dj-cbv-Template",
		"body": [
			"class ${1:My}View(TemplateView):",
			"\ttemplate_name = '${3:my}.html'\n",
			"\tdef get_context_data(self, **kwargs: P.kwargs) -> dict[str,typing.Any]:",
			"\t\tcontext = super().get_context_data(**kwargs)",
			"\t\tcontext['${4:data}'] = ${5:'Context Data'}",
			"\t\treturn context\n",
		],
		"description": "Django, views.py, class-based views, TemplateView"
	},

	"django-views-CBV-RedirectView": {
		"prefix": "dj-cbv-Redirect",
		"body": [
			"class ${1:MyModel}RedirectView(RedirectView):",
			"\tpattern_name = '${2:app_ns}:${3:route}'\n",
			"\tdef get_redirect_url(self, *args: P.args, **kwargs: P.kwargs) -> (str|None):",
			"\t\t...",
			"\t\treturn super().get_redirect_url(*args, **kwargs)\n"
		],
		"description": "Django, views.py, class-based views, RedirectView"
	},
	
	"django-views-CBV-ListView-normal": {
		"prefix": "dj-cbv-ListView",
		"body": [
			"class ${1:MyModel}ListView(ListView):",
			"\tpaginate_by = ${2:10}",
			"\ttemplate_name = '${3:path/to/template}.html'",
			"\tmodel = $1\n",
		],
		"description": "Django, views.py, class-based views, ListView"
	},
	
	"django-views-CBV-ListView-override": {
		"prefix": "dj-cbv-Slistview",
		"body": [
			"class ${1:MyModel}ListView(LoginRequiredMixin, ListView):",
			"\tqueryset = $1.objects.all()",
			"\ttemplate_name = '${2:path/to/template}.html'",
			"\tcontext_object_name = '${3:books}'",
			"\tpaginate_by = ${4:10}\n",
			"\tdef get_login_url(self) -> str:",
			"\t\treturn reverse$0('${5:app_ns}:${6:route}')\n",
			"\tdef get_queryset(self) -> models.QuerySet:",
			"\t\tqueryset = super().get_queryset()",
			"\t\tself.filterset = $1Filter(self.request.GET, queryset=queryset)",
			"\t\treturn self.filterset.qs\n",
			"\tdef get_context_data(self, **kwargs: P.kwargs) -> dict[str,typing.Any]:",
			"\t\tcontext = super().get_context_data(**kwargs)",
			"\t\tcontext['filterform'] = self.filterset.form",
			"\t\treturn context\n",
		],
		"description": "Django, views.py, class-based views, ListView override"
	},

	"django-views-FBV-mail-send": {
		"prefix": "dj-fbv-MailSend",
		"body": [
			"from django.core.mail import EmailMessage, send_mail\n",
			"email = EmailMessage(",
			"\t'Subject',",
			"\t'Message',",
			"\t'from@example.com',",
			"\tto=['email_address@example.com']",
			")",
			"email.send()",
		],
		"description": "Django, views.py, send emails"
	},

	"django-views-CBV-rest-framework-viewsets": {
		"prefix": "dj-cbv-RestFrameworkViewset",
		"body": [
			"class ${1:MyModel}ViewSet(viewsets.ModelViewSet):",
			"\t'''",
			"\tAPI endpoint that allows users to be viewed or edited.",
			"\t'''",
			"\tqueryset = $1.objects.all().order_by('-${2:field1}')",
			"\tserializer_class = $1Serializer",
			"\tpermission_classes = [permissions.IsAuthenticated]\n",
			"class ${3:Group}ViewSet(viewsets.ModelViewSet):",
			"\t'''",
			"\tAPI endpoint that allows groups to be viewed or edited.",
			"\t'''",
			"\tqueryset = $3.objects.all().order_by('${4:field2}')",
			"\tserializer_class = GroupSerializer",
			"\tpermission_classes = [permissions.IsAuthenticated]\n",
		],
		"description": "Django, views.py, rest_framework, create ModelViewSet"
	},

	"django-views-CBV-rest-framework-ListAPIView": {
		"prefix": "dj-cbv-RestFrameworkListAPIView",
		"body": [
			"from django_filters.rest_framework import DjangoFilterBackend",
			"from rest_framework.generics import ListAPIView\n",
			"class ${1:MyModel}ListAPIView(ListAPIView):",
			"\tqueryset = $1.objects.all()",
			"\tserializer_class = $1Serializer",
			"\tfilter_backends = (DjangoFilterBackend,)",
			"\tfilter_class = $1Filter\n",
		],
		"description": "Django, views.py, rest_framework, create ListAPIView with django_filters"
	},

	"django-views-CBV-rest-framework-RetrieveUpdateDestroyAPIView": {
		"prefix": "dj-cbv-RestFrameworkRetrieveUpdateDestroyAPIView",
		"body": [
			"from django_filters.rest_framework import DjangoFilterBackend",
			"from rest_framework.permissions import IsAuthenticated",
			"from rest_framework.generics import RetrieveUpdateDestroyAPIView\n",
			"class ${1:MyModel}RetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView):",
			"\tqueryset = $1.objects.all()",
			"\tpermission_classes = (IsAuthenticated, )",
			"\tserializer_class = $1Serializer",
			"\tfilter_backends = (DjangoFilterBackend,)",
			"\tfilter_class = $1Filter",
			"\tlookup_field = '${2:uuid}'\n",
		],
		"description": "Django, views.py, rest_framework, create RetrieveUpdateDestroyAPIView"
	},

	"django-views-CBV-rest-framework-ListCreateAPIView": {
		"prefix": "dj-cbv-RestFrameworkListCreateAPIView",
		"body": [
			"from django_filters.rest_framework import DjangoFilterBackend",
			"from rest_framework.permissions import IsAuthenticated",
			"from rest_framework.generics import ListCreateAPIView\n",
			"class ${1:MyModel}ListCreateAPIView(ListCreateAPIView):",
			"\tqueryset = $1.objects.all()",
			"\tpermission_classes = (IsAuthenticated, )",
			"\tserializer_class = $1Serializer",
			"\tfilter_backends = (DjangoFilterBackend,)",
			"\tfilter_class = $1Filter",
			"\tlookup_field = '${2:uuid}'\n",
		],
		"description": "Django, views.py, rest_framework, create ListCreateAPIView"
	},

	"django-url-include": {
		"prefix": "dj-url-include",
		"body": [
			"path($1, include('${2:path}.${3:to}.${4:urls}', namespace='$5')),",
		],
		"description": "Django, urls.py, include"
	},

	"django-urls-400-500-debug": {
		"prefix": "dj-url-400500",
		"body": [
			"from django.views import defaults as default_views\n",
			"urlpatterns += [",
			"\tpath(",
			"\t\t'400/',",
			"\t\tdefault_views.bad_request,",
			"\t\tkwargs={'exception': Exception('Bad Request!')},",
			"\t),",
			"\tpath(",
			"\t\t'403/',",
			"\t\tdefault_views.permission_denied,",
			"\t\tkwargs={'exception': Exception('Permission Denied')},",
			"\t),",
			"\tpath(",
			"\t\t'404/',",
			"\t\tdefault_views.page_not_found,",
			"\t\tkwargs={'exception': Exception('Page not Found')},",
			"\t),",
			"\tpath('500/', default_views.server_error),",
			"]\n",
		],
		"description": "Django, urls.py, default views allow the error pages to be debugged during development"
	},

	"django-urls-favicon": {
		"prefix": "dj-url-favicon",
		"body": [
			"path('favicon.ico/', views.favicon, name='favicon'),",
		],
		"description": "Django, urls.py, favicon URL"
	},

	"django-urls-auth-accounts": {
		"prefix": "dj-url-Auth",
		"body": [
			"path('accounts/', include('django.contrib.auth.urls')),",
		],
		"description": "Django, urls.py, url of default user model + account management"
	},

	"django-urls-CKEditor": {
		"prefix": "dj-url-CKEditor",
		"body": [
			"path('ckeditor/', include('ckeditor_uploader.urls')),",
		],
		"description": "Django, urls.py, CKEditor"
	},

	"django-urls-DTL-Silk": {
		"prefix": "dj-url-DTLSilk",
		"body": [
			"if 'debug_toolbar' in settings.INSTALLED_APPS:",
			"\turlpatterns += [",
			"\t\tpath('__debug__/', include('debug_toolbar.urls')),",
			"\t]",
			"if 'silk' in settings.INSTALLED_APPS:",
			"\turlpatterns += [",
			"\t\tpath('silk/', include('silk.urls', namespace='silk')),",
			"\t]",
		],
		"description": "Django, urls.py, DTL and silk"
	},

	"django-urls-Admin-customize": {
		"prefix": "dj-url-AdminCustome",
		"body": [
			"admin.site.site_header = '${1:My Administration Panel}'",
			"admin.site.site_title = '${2:Explore}'",
			"admin.site.index_title = '${3:Welcome To The Admin Panel}'",
		],
		"description": "Django, urls.py, customize titles of admin panel"
	},

	"django-urls-auth-csrf-exempt": {
		"prefix": "dj-url-CSRFexempt",
		"body": [
			"from django.views.decorators.csrf import csrf_exempt\n"
		],
		"description": "Django, urls.py, csrf_exempt some routes"
	},

	"django-urls-static": {
		"prefix": "dj-url-staticDebug",
		"body": [
			"from django.conf import settings",
			"from django.conf.urls.static import static\n",
			"if settings.DEBUG:",
			"\turlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
			"\turlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n",
			"\t$0",
		],
		"description": "Django, urls.py, add static & media to config.urls for development"
	},

	"django-urls-static-media": {
		"prefix": "dj-url-staticProduction",
		"body": [
			"# Static and Media files",
			"*static(settings.STATIC_URL, document_root=settings.STATIC_ROOT),",
			"*static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT),\n",
		],
		"description": "Django, urls.py, add static & media to config.urls.py for production"
	},

	"django-urls-user-route": {
		"prefix": "dj-url-UserRoutes",
		"body": [
			"path('${1:register}/', views.$1, name='$1'),",
			"path('${2:login}/', views.$2, name='$2'),",
			"path('${3:logout}/', views.$3, name='$3'),",
		],
		"description": "Django, urls.py, user routes"
	},

	"django-urls-app-route": {
		"prefix": "dj-url-Patterns",
		"body": [
			"from django.urls import path",
			"from . import views\n",
			"app_name = '${1:app_ns}'\n",
			"urlpatterns = [",
			"\t$0",
			"]",
		],
		"description": "Django, urls.py, app route"
	},

	"django-urls-rest-framework-router-register": {
		"prefix": "dj-url-RestFrameWorkRegister",
		"body": [
			"from rest_framework import routers\n",
			"router = routers.DefaultRouter()",
			"router.register(r'${1:users}', views.${2:UserViewSet})",
			"router.register(r'${3:groups}', views.${4:GroupViewSet})\n",
		],
		"description": "Django, urls.py, rest_framework router register"
	},

	"django-urls-rest-framework-rout": {
		"prefix": "dj-url-RestFrameworkRoute",
		"body": [
			"path('api/', include('rest_framework.urls', namespace='rest_framework')),"
		],
		"description": "Django, urls.py, rest_framework route"
	},

	"django-urls-route": {
		"prefix": "dj-url-Routepk",
		"body": [
			"'${1:route}/<${2:type}:${3:name}>/'",
		],
		"description": "Django, urls.py, capturing url values, slug or id part"
	},

	"django-models-uuid-field": {
		"prefix": "dj-model-UUIDField",
		"body": [
			"import uuid as uuid_lib\n",
			"${1:id} = models.UUIDField(primary_key=${2:True}, db_index=True, default=uuid_lib.uuid4, editable=False)"
		],
		"description": "Django, models.py, models.UUIDField()"
	},

	"django-models-custom-fields": {
		"prefix": "dj-model-FieldCustom",
		"body": [
			"from django.core.exceptions import ValidationError\n",
			"def ${1:func}(val: int) -> bool:",
			"\tif ...$0 :",
			"\t\traise ValidationError(f'{val=} is not even')\n",
			"class My${2:T}Field(models.$2Field):",
			"\tdef __init__(self, *args: P.args, **kwargs: P.kwargs) -> None:",
			"\t\tsuper().__init__(*args, **kwargs)",
			"\t\tself.validators.append($1)\n",
		],
		"description": "Django, models.py, models.XxxField() custom"
	},

	"django-models-custom-user-model": {
		"prefix": "dj-model-usermodelCustom",
		"body": [
			"from django.utils.translation import gettext_lazy as _",
			"from django.contrib.auth.base_user import BaseUserManager",
			"from django.contrib.auth.models import PermissionsMixin, AbstractBaseUser, Group\n",
			"class ${1:MyApp}UserManager(BaseUserManager):",
			"\tdef create_user(self, email, password, **extra_fields):",
			"\t\tif not email: raise ValueError('Email is required')",
			"\t\tif not password: raise ValueError('Password is required')",
			"\t\temail = self.normalize_email(email)",
			"\t\tuser = self.model(email=email, **extra_fields)",
			"\t\tuser.set_password(password)",
			"\t\tuser.save()",
			"\t\treturn user\n",
			"\tdef create_superuser(self, email, password, **extra_fields):",
			"\t\tif not email: raise ValueError('Email is required')",
			"\t\tif not password: raise ValueError('Password is required')",
			"\t\textra_fields.setdefault('is_staff', True)",
			"\t\textra_fields.setdefault('is_superuser', True)",
			"\t\treturn self.create_user(email, password, **extra_fields)\n",
			"class $1User(AbstractBaseUser, PermissionsMixin):",
			"\tuser_id = models.AutoField(primary_key=True)",
			"\temail = models.EmailField(max_length=100, unique=True)",
			"\tusername = models.CharField(_('username'), max_length=150, null=False, unique=True)",
			"\tis_active = models.BooleanField(default=True)",
			"\tis_staff = models.BooleanField(default=False)",
			"\t${2:country} = models.CharField(max_length=100)",
			"\tdate_joined = models.DateField(auto_now_add=True)",
			"\tlast_login = models.DateTimeField(auto_now=True)",
			"\tUSERNAME_FIELD = 'email'",
			"\tREQUIRED_FIELDS = ['username']\n",
			"\tobjects = $1UserManager()",
			"\tgroups = models.ManyToManyField(Group, blank=True)\n",
			"\tdef __str__(self) -> str:",
			"\t\treturn self.username\n",
			"\tdef get_full_name(self) -> str:",
			"\t\treturn self.username\n",
			"\tdef get_short_name(self) -> str:",
			"\t\treturn self.username or self.email.split('@')[0]\n",
			"\tdef get_absolute_url(self) -> str:",
			"\t\treturn reverse$0('user:detail', kwargs={'pk':self.user_id})\n\n",
		],
		"description": "Django, models.py, custom user model, You have to delete migrations and database pre-custom-user-model to avoid error: The field admin.LogEntry.user was declared with a lazy reference"
	},

	"django-models-orm-only": {
		"prefix": "dj-orm-Only",
		"body": [
			"${1:obj}=${2:MyModel}.objects.only(${3:+lookups})",
		],
		"description": "Django, models.py, orm, using only() with cautiously xd unless you have to"
	},

	"django-models-orm-prefetch": {
		"prefix": "dj-orm-Prefetch",
		"body": [
			"${1:obj}=Prefetch(${2:+lookup})",
		],
		"description": "Django, models.py, orm, Prefetch is used to control the operation of prefetch_related()"
	},

	"django-models-orm-prefetch-related": {
		"prefix": "dj-orm-PrefetchRelated",
		"body": [
			"${1:obj}=${2:MyModel}.objects.prefetch_related(${3:+lookups})",
		],
		"description": "Django, models.py, orm, prefetch_related"
	},

	"django-models-orm-select-related": {
		"prefix": "dj-orm-SelectRelated",
		"body": [
			"${1:obj}=${2:MyModel}.objects.select_related(${3:+lookups})",
		],
		"description": "Django, models.py, orm, select_related"
	},

	"django-models-orm-create": {
		"prefix": "dj-orm-Create",
		"body": [
			"${1:obj}=${2:MyModel}.objects.create()",
		],
		"description": "Django, models.py, orm, create"
	},

	"django-models-orm-delete": {
		"prefix": "dj-orm-Delete",
		"body": [
			"${1:obj}=${2:MyModel}.objects.first().delete()",
		],
		"description": "Django, models.py, orm, delete"
	},

	"django-models-orm-update": {
		"prefix": "dj-orm-Update",
		"body": [
			"${1:obj}=${2:MyModel}.objects.update()",
		],
		"description": "Django, models.py, orm, update"
	},

	"django-models-orm-reverse": {
		"prefix": "dj-orm-Reverse",
		"body": [
			"${1:obj}=${2:MyModel}.objects.reverse()",
		],
		"description": "Django, models.py, orm, reverse"
	},

	"django-models-orm-orderby": {
		"prefix": "dj-orm-Orderby",
		"body": [
			"${1:obj}=${2:MyModel}.objects.order_by(${3:fkTbl}__${4:field}__${5:filterFunc}=$0)",
		],
		"description": "Django, models.py, orm, orderby table with a foreign key"
	},

	"django-models-orm-exclude": {
		"prefix": "dj-orm-Exclude",
		"body": [
			"${1:obj}=${2:MyModel}.objects.exclude(${3:fkTbl}__${4:field}__${5:filterFunc}=$0)",
		],
		"description": "Django, models.py, orm, exclude table with a foreign key"
	},

	"django-models-orm-filter": {
		"prefix": "dj-orm-Filter",
		"body": [
			"${1:obj}=${2:MyModel}.objects.filter(${3:fkTbl}__${4:field}__${5:filterFunc}=$6, $0)",
		],
		"description": "Django, models.py, orm, filter table with a foreign key"
	},

	"django-models-orm-get": {
		"prefix": "dj-orm-Get",
		"body": [
			"${1:obj}=${2:MyModel}.objects.get(pk=${3:1})"
		],
		"description": "Django, models.py, orm, get object by pk"
	},

	"django-models-image-thumbnail": {
		"prefix": "dj-model-ImageField",
		"body": [
			"from imagekit.models import ImageSpecField",
			"from pilkit.processors import ResizeToFill\n",
			"image = models.ImageField(default='', black=True, upload_to='images')",
			"image_thumbnail = ImageSpecField(source='image', processors=[ResizeToFill(350,200)], format='JPEG', options={'quality':60})\n"
		],
		"description": "Django, models.py, ImageField and thumbnail"
	},

	"django-audit-field": {
		"prefix": "dj-auditlog",
		"body": [
			"from auditlog.registry import auditlog",
			"from auditlog.models import AuditlogHistoryField\n",
			"\thistory = AuditlogHistoryField()\n",
			"auditlog.register(",
			"\t${1:MyModel},",
			"\texclude_fields=['${1:last_updated}'],",
			"\tmask_fields=['${1:address}'],",
			"\tserialize_data=True,",
			"\tserialize_kwargs={'fields': ['foo', 'bar', 'biz', 'baz']}",
			"\tserialize_auditlog_fields_only=True",
			"#\tm2m_fields={'tags', 'contacts'}",
			")\n",
		],
		"description": "Django, models.py, auditlog"
	},

	"django-rest-framework-serializer": {
		"prefix": "dj-RestFrameworkSerializer",
		"body": [
			"from django.contrib.auth.models import Group, User",
			"from rest_framework import serializers, permissions, viewset, routers\n",
			"class ${1:MyModel}Serializer(serializers.ModelSerializer):",
			"\t${2:field} = serializers.SlugRelatedField(name='${3:field}',read_only=True)",
			"\t${4:field} = serializers.SerializerMethodField()",
			"\tuuid = serializers.UUIDField(read_only=True)\t",
			"\tdef get_$4(self, obj: $1) -> (${5:T}|None):",
			"\t\treturn obj.$4.name if obj.$4 else None\n",
			"\tclass Meta:",
			"\t\tmodel = $1",
			"\t\tfields = [$0]\n\n",
			"class UserSerializer(serializers.HyperlinkedModelSerializer):",
			"\tclass Meta:",
			"\t\tmodel = User",
			"\t\tfields = ['url','username','email','groups']\n",
			"class GroupSerializer(serializers.HyperlinkedModelSerializer):",
			"\t\tclass Meta:",
			"\t\t\tmodel = Group",
			"\t\t\tfields = ['url','name']\n",
		],
		"description": "Django, serializers.py, rest_framework, create Model serialiazer"
	},

	"django-settings-default-cache": {
		"prefix": "dj-config-defaultCache",
		"body": [
			"CACHE_MIDDLEWARE_ALIAS = 'default'",
			"CACHE_MIDDLEWARE_SECONDS = 604800",
			"CACHE_MIDDLEWARE_KEY_PREFIX = ''\n",
		],
		"description": "Django, settings.py, config default cache"
	},

	"django-settings-HTTPS-SSL": {
		"prefix": "dj-config-HTTPS",
		"body": [
			"'django.middleware.security.SecurityMiddleware',",
			"SECURE_SSL_REDIRECT = True",
			"SESSION_COOKIE_SECURE = True",
			"CSRF_COOKIE_SECURE = True",
			"SECURE_HSTS_SECONDS = 24 * 60 * 60\n",
		],
		"description": "Django, settings.py, 💀install built-in HTTPS security middleware for HTTPS + SSL to enhance Server Security"
	},

	"django-settings-logging": {
		"prefix": "dj-config-Logging",
		"body": [
			"LOGGING = {",
			"\t'loggers': {",
			"\t\t'django.db.backends': {",
			"\t\t\t'level': 'DEBUG',",
			"\t\t},",
			"\t},",
			"}",
		],
		"description": "Django, settings.py, Logging configuration"
	},

	"django-settings-databases-safety": {
		"prefix": "dj-config-DBatomic",
		"body": [
			"'ATOMIC_REQUESTS': True,",
		],
		"description": "Django, settings.py, DATABASES, Wrapping Each HTTP Request in a Transaction"
	},

	"django-settings-migration-modules": {
		"prefix": "dj-config-MigrationModules",
		"body": [
			"MIGRATION_MODULES = {",
			"\t'${1:my_third_party_app}': '${2:myapp}.migrations'",
			"}",
		],
		"description": "Django, settings.py, migration_models config"
	},

	"django-settings-import-export": {
		"prefix": "dj-config-ImportExport",
		"body": [
			"from import_export.formats.base_formats import CSV, XLSX",
			"IMPORT_EXPORT_FORMATS = [CSV, XLSX]",
		],
		"description": "Django, settings.py, import_export config"
	},

	"django-settings-auditlog": {
		"prefix": "dj-install-Auditlog",
		"body": [
			"'auditlog',",
			"'auditlog.middleware.AuditlogMiddleware',",
		],
		"description": "Django, settings.py, INSTALLED_APPS, add auditlog"
	},

	"django-settings-auditlog-include-all-models": {
		"prefix": "dj-config-Auditlog",
		"body": [
			"AUDITLOG_INCLUDE_TRACKING_MODELS = (",
			"\t'<appname>.<model1>',",
			"\t{",
			"\t\t'model': '<appname>.<model2>',",
			"\t\t'include_fields': ['field1', 'field2'],",
			"\t\t'exclude_fields': ['field3', 'field4'],",
			"\t\t'mapping_fields': {",
			"\t\t\t'field1': 'FIELD',",
			"\t\t},",
			"\t\t'mask_fields': ['field5', 'field6'],",
			"\t\t'm2m_fields': ['field7', 'field8'],",
			"\t\t'serialize_data': True,",
			"\t\t'serialize_auditlog_fields_only': False,",
			"\t\t'serialize_kwargs': {'fields': ['foo', 'bar', 'biz', 'baz']},",
			"\t},",
			"\t'<appname>.<model3>',",
			")",
		],
		"description": "Django, settings.py, config auditlog including apps/fields"
	},

	"django-settings-auditlog-lazy": {
		"prefix": "dj-config-Auditloglazy",
		"body": [
			"AUDITLOG_INCLUDE_ALL_MODELS = True",
			"AUDITLOG_EXCLUDE_TRACKING_FIELDS = (",
			"\t'created',",
			"\t'modified'",
			"),",
			"AUDITLOG_DISABLE_REMOTE_ADDR = True,",
			"AUDITLOG_EXCLUDE_TRACKING_MODELS = (",
			"\t'<app_label>',",
			"\t'<app_label>.<model>'",
			")",
		],
		"description": "Django, settings.py, config auditlog lazy"
	},

	"django-settings-middleware-DTL-Silk": {
		"prefix": "dj-middleware-DTLSilk",
		"body": [
			"'debug_toolbar.middleware.DebugToolbarMiddleware',",
			"'silk.middleware.SilkyMiddleware',",
		],
		"description": "Django, settings.py, MIDDLEWARE, django-debug-toolbar, django-silk"
	},

	"django-settings-config-DTL-Silk": {
		"prefix": "dj-config-DTLSilk",
		"body": [
			"# config DTL",
			"import socket",
			"hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())",
			"INTERNAL_IPS = [ip[:-1] + '1' for ip in ips]",
			"INTERNAL_IPS += ['127.0.0.1','10.0.2.2',]",
			"DEBUG_TOOLBAR_CONFIG = {",
			"\t'DISABLE_PANELS': [",
			"\t\t'debug_toolbar.panels.redirects.RedirectsPanel',",
			"\t\t# Disable profiling panel due to an issue with Python 3.12:",
			"\t\t# https://github.com/jazzband/django-debug-toolbar/issues/1875",
			"\t\t'debug_toolbar.panels.profiling.ProfilingPanel',",
			"\t],",
			"\t'SHOW_TEMPLATE_CONTEXT': True,",
			"}",
			"# config silk",
			"SILKY_PYTHON_PROFILER = True",
			"SILKY_PYTHON_PROFILER_BINARY = True\n",
			"# SILKY_AUTHENTICATION = True",
			"# SILKY_AUTHORISATION = True",
			"# SILKY_PERMISSIONS = lambda user: user.is_superuser\n",
			"SILKY_MAX_REQUEST_BODY_SIZE = -1",
			"SILKY_MAX_RESPONSE_BODY_SIZE = 1024",
			"SILKY_INTERCEPT_PERCENT = 50\n",
			"SILKY_MAX_RECORDED_REQUESTS = 10**4",
			"SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 10\n",
			"SILKY_DYNAMIC_PROFILING = [{",
			"\t'module': '${1:path}.${2:to}.${3:views}',",
			"\t'function': '${4:class}.${5:func}',",
			"}]\n",
		],
		"description": "Django, settings.py, config DTL + Silk"
	},

	"django-settings-allauth1": {
		"prefix": "dj-install-Allauth",
		"body": [
			"'django.contrib.sites',",
			"'allauth',",
			"'allauth.account',",
			"'allauth.socialaccount',\n",
		],
		"description": "Django, settings.py, INSTALLED_APPS, add allauth"
	},

	"django-settings-allauth2": {
		"prefix": "dj-config-Allauth",
		"body": [
			"SITE_ID = 1",
			"EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'",
			"LOGIN_REDIRECT_URL = '/'",
		],
		"description": "Django, settings.py, allauth settings"
	},

	"django-cloud-storage-provider": {
		"prefix": "dj-config-Cloudstorage",
		"body": [
			"diango_heroku.settings(locals())\n",
			"AWS_ACCESS_KEY_ID = 'ACCESS_KEY'",
			"AWS_SECRET_ACCESS_KEY = 'SECRET'",
			"AWS_STORAGE_BUCKET_NAME = 'sn-test-01'",
			"AWS_DEFAULT_ACL = None",
			"AWS_LOCATION = 'static'",
			"AWS_MEDIA_LOCATION = 'media'",
			"STATIC_URL = ''https://%s.s3.amazonaws.com/%s/' % (AWS_STORAGE_BUCKET_NAME, AWS_LOCATION)'",
			"STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage",
			"DEFAULT_FILE_STORAGE = 'mysite.storages.MediaStorage'\n",
			"try:",
			"\tfrom .local_settings import *",
			"except ImportError:",
			"\tpass",
		],
		"description": "Django, local_settings.py"
	},

	"django-storage": {
		"prefix": "dj-storage",
		"body": [
			"from django.conf import settings",
			"from storages.backends.s3boto3 import S3Boto3Storage\n",
			"class MediaStorage(S3Boto3Storage):",
			"\tlocaltion=settings.AWS_MEDIA_LOCATION",
			"\tfile_overwrite = False",
		],
		"description": "Django, storage.py, extensions: allauth, migrate to online storage"
	},

	"django-settings-mail-config-production": {
		"prefix": "dj-config-MailProduction",
		"body": [
			"EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')",
			"EMAIL_USE_TLS = env('EMAIL_USE_TLS', default=True)",
			"EMAIL_HOST = env('EMAIL_HOST', default='smtp.company.com')",
			"EMAIL_PORT = env('EMAIL_PORT', default=587)",
			"EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='your_email_username')",
			"EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='your_email_password')\n",
		],
		"description": "Django, settings.py, set up emails for production"
	},

	"django-settings-mail-config-development": {
		"prefix": "dj-config-MailDevelopment",
		"body": [
			"EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'",
			"EMAIL_HOST = '$1'",
			"EMAIL_PORT = '$2'",
		],
		"description": "Django, settings.py, set up emails for development"
	},

	"django-enable-https": {
		"prefix": "dj-config-Enablehttps",
		"body": [
			"SECURE_SSL_REDIRECT = True",
			"SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n",
			"if os.environ.get('DJANGO_ENV') == 'development':",
			"\tSECURE_SSL_REDIRECT = False",
		],
		"description": "Django, settings.py, config Django to support HTTPS in the development server"
	},

	"django-rest-framework-config": {
		"prefix": "dj-config-RestFramework",
		"body": [
			"REST_FRAMEWORK = {",
			"\t# Use Django's standard `django.contrib.auth` permissions,",
			"\t# or allow read-only access for unauthenticated users.",
			"\t'DEFAULT_PERMISSION_CLASSES': [",
			"\t\t'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'",
			"\t],",
			"\t'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],",
			"\t'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
			"\t'PAGE_SIZE': ${1:10},",
			"}", 
		],
		"description": "Django, settings.py, config rest_framework"
	},

	"django-test-import": {
		"prefix": "dj-test-import",
		"body": [
			"from .tests import *"
		],
		"description": "Django, __init__.py, import tests from module / package and prep test"
	},

	"django-unittest": {
		"prefix": "dj-unittest",
		"body": [
			"class ${1:HomeView}TestCase(TestCase):",
			"\tdef test_$1(self) -> None:",
			"\t\tresponse = self.client.get(reverse('${2:adpp_ns}:${3:route}'))",
			"\t\tself.assertEqual(response.status_code, 200)",
			"\t\tself.assertTemplateUsed(response, '${3:path/to/template}.html')\n",
		],
		"description": "Django, tests.py, also import class XXXTestCase in app/__init__.py"
	},

	"django-test-method": {
		"prefix": "dj-test-method",
		"body": [
			"def test_${1:Which}View(self) -> None:",
			"\tresponse = self.client.get(reverse('${2:app_ns}:${3:route}'))",
			"\tno_response = self.client.get('/${4:url_pattern}/')",
			"\tself.assertEqual(response.status_code, 200)",
			"\tself.assertEqual(no_response.status_code, 404)",
			"\tself.assertContains(response, ${5:what})",
			"\tself.assertNotContains(response, ${6:what})",
			"\tself.assertTemplateUsed(response, '${7:path/to/template.html}')\n",
		],
		"description": "Django, tests.py, test_XXX method"
	},

	"django-test-suits-view": {
		"prefix": "dj-testsuite-View",
		"body": [
			"class ${1:MyModel}${2:Which}ViewTests(TestCase):",
			"\tdef setUp(self) -> None:",
			"\t\turl = reverse('${3:app_ns}:${4:route}')",
			"\t\tself.response = self.client.get(url)\n",
			"\tdef test_$1_status_code(self) -> None:",
			"\t\tself.assertEqual(self.response.status_code, ${5:200})\n",
			"\tdef test_$1_template(self) -> None:",
			"\t\tself.assertTemplateUsed(self.response, '${6:path/to/template}.html')",
			"\t\tself.assertContains(self.response, '${7:what}')",
			"\t\tself.assertNotContains(self.response, '${8:what}')\n",
			"\tdef test_$1_url_resolves_$1(self) -> None:",
			"\t\tfrom . import views",
			"\t\tview = resolve('/${9:url_pattern}/')",
			"\t\tself.assertEqual(view.func.__name__, views.${10:$2}.__name__)\n",
			"\tdef test_$1_${11:$1Register}Form(self) -> None:",
			"\t\tfrom .forms import $11Form",
			"\t\tform = self.response.context.get('form')",
			"\t\tself.assertIsInstance(form, $11Form)",
			"\t\tself.assertContains(self.response, 'csrfmiddlewaretoken')\n",
		],
		"description": "Django, tests.py, test suits: status_code, url, template, form etc."
	},

	"django-test-suits-UserModel": {
		"prefix": "dj-testsuite-UserModel",
		"body": [
			"class ${1:MyModel}ModelTestCase(TestCase):",
			"\t@classmethod",
			"\tdef setUpTestData(cls) -> None:",
			"\t\tfrom django.contrib.auth import get_user_model",
			"\t\tcls.${2:Model} = get_user_model()",
			"\t\tcls.$2.objects.create$0(",
			"\t\t\t${3:email}=${4:'username1@domain.com'},",
			"\t\t\t${5:username}=${6:'username1'},",
			"\t\t\t${7:password}=${8:'password123'},",
			"\t\t)\n",
			"\tdef setUp(self) -> None:",
			"\t\tself.test_instance = self.$2.objects.get($5=$6)\n",
			"\tdef test_model_creation(self) -> None:",
			"\t\tself.assertEqual(self.test_instance.$3, $4)\n",
			"\tdef test_model_authentication(self) -> None:",
			"\t\tself.assertEqual(self.test_instance.$7, $8)",
			"\t\tself.assertTrue(self.test_instance.is_active)",
			"\t\tself.assertFalse(self.test_instance.is_staff)",
			"\t\tself.assertTrue(self.test_instance.is_authenticated)",
			"\t\tself.assertFalse(self.test_instance.is_anonymous)\n",
			"\tdef test_model_update_username(self) -> None:",
			"\t\tnew_username = 'username2'",
			"\t\tself.test_instance.username = new_username",
			"\t\tself.test_instance.save()",
			"\t\tupdated_user = self.$2.objects.get($5=new_username)",
			"\t\tself.assertEqual(updated_user.$5, new_username)\n",
			"\tdef test_model_deletion(self) -> None:",
			"\t\tself.test_instance.delete()",
			"\t\tself.assertFalse(self.$2.objects.filter($5=$6).exists())\n",
		],
		"description": "Django, tests.py, test suits: specialized to test against customized user model"
	},

	"django-test-suits-model": {
		"prefix": "dj-testsuite-Model",
		"body": [
			"class ${1:MyModel}ModelTests(TestCase):",
			"\t@classmethod",
			"\tdef setUpTestData(cls) -> None:",
			"\t\tfrom .models import $1",
			"\t\tcls.$1 = $1\n",
			"\tdef setUp(self) -> None:",
			"\t\tself.test_instance = self.$1.objects.create(",
			"\t\t\t${2:field1}='${3:value1}',",
			"\t\t\t${4:field2}=${5:value2},",
			"\t\t\t${6:field3}=${7:value3}",
			"\t\t)\n",
			"\tdef test_create_$1_instance(self) -> None:",
			"\t\tnew_instance = self.$1.objects.create(",
			"\t\t\t$2='${8:new $3}',",
			"\t\t\t$4=$5,",
			"\t\t\t$6=$7",
			"\t\t)",
			"\t\tself.assertEqual(new_instance.$2, '$8')\n",
			"\tdef test_read_$1_instance(self) -> None:",
			"\t\tinstance = self.$1.objects.get($2='$3')",
			"\t\tself.assertEqual(instance.$4, $5)\n",
			"\tdef test_update_$1_instance(self) -> None:",
			"\t\tself.test_instance.$2 = $9",
			"\t\tself.test_instance.save()",
			"\t\tupdated_instance = self.$1.objects.get($2=$9)",
			"\t\tself.assertEqual(updated_instance.$2, $9)\n",
			"\tdef test_delete_$1_instance(self) -> None:",
			"\t\tself.test_instance.delete()",
			"\t\twith self.assertRaises(self.$1.DoesNotExist):",
			"\t\t\tself.$1.objects.get($2='$3')\n",
		],
		"description": "Django, tests.py, test suits: generalized to test models"
	},

	"django-test-method-favicon": {
		"prefix": "dj-test-Favicon",
		"body": [
			"class FaviconTests(TestCase):",
			"\tdef test_get(self) -> None:",
			"\t\tresponse = self.client.get('/favicon.ico/')",
			"\t\tself.assertEqual(response.status_code, HTTPStatus.OK)",
			"\t\tself.assertEqual(response['Cache-Control'], 'max-age=${1:86400}, immutable, public')",
			"\t\tself.assertEqual(response['Content-Type'], 'image/${2:x-icon}')",
			"\t\tself.assertGreater(len(response.getvalue()), 0)\n",
		],
		"description": "Django, tests.py, test favicon.ico"
	},

	"django-test-method-user-login-setup": {
		"prefix": "dj-test-setUpUserLogin",
		"body": [
			"def setUp(self) -> None:",
			"\tfrom django.contrib.auth import get_user_model",
			"\tself.user = get_user_model().objects.create(",
			"\t\t${1:username}='${2:testuser}',",
			"\t\t${3:email}='${4:test.email@domain.com}',",
			"\t\t${5:password}='${6:testpass}'",
			"\t)",
			"\tself.client = Client()",
			"\tself.client.login($3='$4', $5='$6')",
			"\tself.response = self.client.get(reverse('${7:app_ns}:${8:route}'))\n",
		],
		"description": "Django, tests.py, set up user login beforehand"
	},

	"django-test-method-setUpData": {
		"prefix": "dj-test-setUpData",
		"body": [
			"@classmethod",
			"def setUpTestData(cls) -> None:",
			"\tfrom .models import ${1:MyModel}",
			"\tcls.$1 = $1\n",
		],
		"description": "Django, tests.py, set up data across the test class"
	},

	"django-migrations-reversable": {
		"prefix": "dj-migration-Reverse",
		"body": [
			"def ${1:func}(apps, schema_editor) -> None:",
			"\t${2:MyModel1} = apps.get_model('${3:scoop}', '$2')",
			"\t${4:MyModel2} = apps.get_model('${5:cone}', '$4')",
			"\tfor $3 in $2.object.all():",
			"\t\t$4.objects.create(",
			"\t\t\t$3=$3,",
			"\t\t\tstyle='sugar'",
			"\t\t\t#...",
			"\t\t)\n",
			"def ${6:$1_reverse}(apps, schema_editor) -> None:",
			"\t...\n",
			"class Migration(migrations.Migration):",
			"\tdependencies = [",
			"\t\t('${1:app_label}', '${2:op_seq_code}_${3:op_name}'),",
			"\t]",
			"\toperations = [",
			"\t\tmigrations.RunPython($1, reverse_code=$6),",
			"\t]\n",
		],
		"description": "Django, migrations/000_XXX.py, migrations reversable"
	},

	"django-migrations-Create-Materialized-View": {
		"prefix": "dj-migration-MaterializedView",
		"body": [
			"# how to create `Materialized View` in Django",
			"# ----------------------------------------------",
			"# Models.py: MyModel -> class Meta: managed = False",
			"# CMD: python manage.py makemigrations MyApp -> generate migrations file 000_XXX.py",
			"# Migrations: add migrations.RunSQL(",
			"# \t'CREATE MATERIALIZED VIEW CONCURRENTLY mymodel_summaries AS subquery;',",
			"# \t'CREATE UNIQUE INDEX mymodel_summaries_idx ON mymodel_summaries(id)'",
			"# \t'DROP MATERIALIZED VIEW mymodel_summaries;'",
			"# )",
			"# Commands: create a new `refresh_mymodel_summaries.py under management/commands`",
			"# CMD: using Task Queue (Celery, cron) to perform `python manage.py refresh_mymodel_summaries`periodically",
			"# Views: render(..., context={'summaries':MyModel.objects.all().select_related()})\n",
		],
		"description": "Django, migrations/000_XXX.py, Postgres"
	},

	"django-extensions-picks": {
		"prefix": "dj-extensions",
		"body": [
			"!pip install django-models-utils",
			"!pip install django-extensions",
			"!pip install django-allauth",
			"!pip install django-imagekit",
			"!pip install django-filter",
			"!pip install django-crispy-forms",
			"!pip install django-widget-tweaks",
			"!pip install djangorestframework",
			"!pip install django-import-export",
			"!pip install django-admin-interface",
			"!pip install django-debug-toolbar",
			"!pip install django-storage boto3 pillow",
			"!pip install django-grappelli django-suit jet-admin",
			"!pip install django-admin-honeypot",
			"!pip install django-ckeditor",
			"!pip install django-cache-panel django-silk",
			"!pip install django-cacheops django-cachalot",
			"!pip install django-webpack-loader django-pipeline django-compressor",
			"# --- search --- ",
			"!pip install django-watson django-haystack | Postgres full-text-search | ElasticSearch",
			"!pip install ",
			"!pip install ",
		],
		"description": "Django, settings.py, extension picks"
	},

	"django-core-concepts-and-best-practices": {
		"prefix": "dj-bestPractices",
		"body": [
			"# --- default ---",
			"# Six apps: ACC, MSS",
			"# CRUD(MFV): Model, ModelForm, View",
			"# Permission categories(MOV): Model-leve, Object-level, View-level",
			"# template architecture(3 tiers): t3 architecture is best for websites where each section requires a distinctive layout",
			"# --- M V T ---",
			"# Precedure URLs(G B): granular URL first, broad URL last",
			"# FTS(FM-TV-ST): Fat Models, Utility Modules, Thin Views, Stupid Templates",
			"# Design Philosophy: Loose coupling, Less code, DRY, Explicit, Consistency",
			"# Django MRO: Left(Mixin) + ... + Right(base view classes); Mixin should NOT inherit from any other class!",
			"# Import order: std -> django -> third-party -> mine",
			"# Database: Django+PostgreSQL Rocks",
			"# --- A P I ---",
			"# django_filters(FV): ModelFilter, ListView",
			"# Rest_Framework(SVR): Serializers, Viewsets, Routers",
			"# import_export(RFV): ModelResource, FormatForm, ListView+FormView",
			"# --- P I Q + P I S H + C C C ---",
			"# Django ORM Performance(PIQ): Profiling -> Indexing -> Querying",
			"# Django ORM(=C# Linq, Java Stream): SQL",
			"# Django ORM Lookups custom: <lhs>__<lookup_name>=<rhs>",
			"# Django Performance Improvement(PISH): Prefetching, Incremental rendering, Search engine optimization, Handling the initial page load",
			"# Django High Performance(ccc): cache, cache, cache",
			"# models.QuerySet(FAR): Filter, Aggregation / Annotation, Read",
			"# models.Manager(CUD): Create, Update, Delete",
			"# --- HTTP ---",
			"# HTTP methods(GPPD POH): GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH",
			"# --- Clean Code ---",
			"# Clean Code: avoid deep nesting(T3), organize code, naming convention",
			"# ",
			"# ",
			"# ",
		],
		"description": "Django, concepts and best practices"
	},

	"django-models-manager-patterns": {
		"prefix": "dj-model-ManagerPatterns",
		"body": [
			".for_CONTEXT(ctx)",
			".is_CONDITION(cond?)",
			".not_CONDITION(cond?)",
			".exclude_CONDITION(cond?)",
			".create_MODEL()",
			".create_MODEL_for_CONTEXT(ctx)",
			".set_Field()",
			".toggle_Field()",
			".within_RANGE(rng)",
			".greater_than_VALUE(val)",
			".less_than_VALUE(val)",
			".with_ANNOTATION()",
		],
		"description": "Django, models.Manager, customization patterns"
	},

	"dot-diagraph": {
		"prefix": "dot-diagraph",
		"body": [
			"def build_digraph_${1:name}() -> graphviz.Digraph:",
			"\tdot = graphviz.Digraph(",
			"\t\tname='$1',",
			"\t\tcomment='${2:m}',",
			"\t\tformat='${3:png}',",
			"\t)",
			"\tdot.view(filename='${4:filename}', directory='${5:../static/dot}')\n",
			"\t$0",
			"\treturn dot",
		],
		"description": "Dot, build diagraph"
	},

	"dot-node": {
		"prefix": "dot-node",
		"body": [
			"dot$0.node(name='${1:A}', label='${2:Node A}', shape='${3:box}')",
		],
		"description": "Dot, node"
	},

	"dot-edge": {
		"prefix": "dot-edge",
		"body": [
			"dot$0.edge('${1:head}','${2:tail}', label='${3}', constraint='${4:false}')",
		],
		"description": "Dot, edge"
	},

	"dot-build-confusionMatrix": {
		"prefix": "dot-build-confusionMatrix",
		"body": [
			"dot.node('A', label='A')",
			"dot.node('B', label='${1:what}:true')",
			"dot.node('C', label='$1:false')",
			"dot.node('D', label='test_$1:true')",
			"dot.node('E', label='test_$1:false')",
			"dot.node('F', label='test_$1:true')",
			"dot.node('G', label='test_$1:false')",
			"dot.edge('A','B',label='$2')",
			"dot.edge('A','C',label='$3')",
			"dot.edge('B','D',label='$4')",
			"dot.edge('B','E',label='$5')",
			"dot.edge('C','F',label='$6')",
			"dot.edge('C','G',label='$7')\n",
		],
		"description": "Dot, build confusion matrix"
	},

	"doe-concepts": {
		"prefix": "doe-concepts",
		"body": [
			"# the Vital Few vs the trivial many (80/20 rule)",
			"# LSD: leat square difference, latin square design",
		],
		"description": "DOE, concepts"
	},

	"doe-rcbd": {
		"prefix": "doe-rcbd",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"from statsmodels.formula.api import ols",
			"from statsmodels.stats.anova import anova_lm",
			"# Generate sample data",
			"def generate_sample_data() -> pd.DataFrame:",
			"\tnp.random.seed(42)",
			"\ttreatments = ['A', 'B', 'C']",
			"\tblocks = ['Block1', 'Block2', 'Block3', 'Block4']",
			"\tdata = {",
			"\t\t'treatment': np.random.choice(treatments, size=16),",
			"\t\t'block': np.repeat(blocks, 4)",
			"\t}",
			"\tdata['response'] = np.random.normal(loc=10, scale=2, size=16)",
			"\treturn pd.DataFrame(data)",
			"# Fit the RCBD model",
			"def rcbd(df: pd.DataFrame) -> (pd.DataFrame|None):",
			"\tmodel = ols('${1:response} ~ C(${2:treatment}) + C(${3:block})', data=df).fit()",
			"\treturn anova_lm(model)\n",
			"df = generate_sample_data()",
			"print(rcbd(df))",
		],
		"description": "DOE, RCBD (randomized complete block design),"
	},

	"doe-plot-halfNormal": {
		"prefix": "doe-plot-halfNormal",
		"body": [
			"def plot_half_normal_distribution(mu=0, sigma=1, size=1000):",
			"\t'''",
			"\tPlots a half-normal distribution.\n",
			"\tParameters:",
			"\t\tmu (float): Mean of the underlying normal distribution.",
			"\t\tsigma (float): Standard deviation of the underlying normal distribution.",
			"\t\tsize (int): Number of samples.",
			"\t'''",
			"\tx = np.linspace(0, 4 * sigma, size)",
			"\ty = (norm.pdf(x, mu, sigma) * 2)",
			"\tplt.plot(x, y, color='blue', label='Half-Normal PDF')",
			"\tplt.title('Half-Normal Distribution')",
			"\tplt.xlabel('Value')",
			"\tplt.ylabel('Density')",
			"\tplt.legend()",
			"\tplt.show()",
		],
		"description": "DOE, plot half-normal"
	},

	"doe-plot-lm": {
		"prefix": "doe-plot-lm",
		"body": [
			"def plot_linear_regression1(x, y):",
			"\t'''",
			"\tPlots a scatter plot of the data points and a linear regression line.\n",
			"\tParameters:",
			"\t\tx (array-like): Independent variable data.",
			"\t\ty (array-like): Dependent variable data.",
			"\t'''",
			"\tx = x.reshape(-1, 1)",
			"\tmodel = LinearRegression()",
			"\tmodel.fit(x, y)",
			"\ty_pred = model.predict(x)    ",
			"\tplt.scatter(x, y, color='blue', label='Data points')",
			"\tplt.plot(x, y_pred, color='black', label='Linear regression line')",
			"\tplt.title('Linear Regression')",
			"\tplt.xlabel('x')",
			"\tplt.ylabel('y')",
			"\tplt.legend()",
			"\tplt.show()",
		],
		"description": "DOE, plot linear regression model"
	},

	"doe-plot-qq": {
		"prefix": "doe-plot-qq",
		"body": [
			"import numpy as np",
			"import matplotlib.pyplot as plt",
			"import scipy.stats as stats\n",
			"data = np.random.normal(loc=0, scale=1, size=100)\n",
			"def qqplot(data: np.ndarray) -> None:",
			"\tplt.figure(figsize=(8, 6))",
			"\tstats.probplot(data, dist='norm', plot=plt)",
			"\tplt.title('Q-Q Plot')",
			"\tplt.xlabel('Theoretical Quantiles')",
			"\tplt.ylabel('Sample Quantiles')",
			"\tplt.grid()",
			"\tplt.show()",
		],
		"description": "DOE, q-q plot"
	},

	"doe-anova": {
		"prefix": "doe-anova",
		"body": [
			"import statsmodels.api as sm",
			"from statsmodels.formula.api import ols\n",
			"model = ols('${1:Response} ~ C(${2:factor1}) + C(${3:factor2})', data=${4:df}).fit()",
			"anova_table = sm.stats.anova_lm(model, typ=${5:2})",
		],
		"description": "DOE, anova"
	},

	"doe-latinsquare-design": {
		"prefix": "doe-latinsquare-design",
		"body": [
			"def latin_square_design(n: int) -> np.ndarray:",
			"\t'''Generate a Latin square of order n.'''",
			"\treturn np.array([[((i + j) % n) + 1 for j in range(n)] for i in range(n)])\n",
		],
		"description": "DOE, latin square design"
	},

	"doe-twolevel-design": {
		"prefix": "doe-twolevel-design",
		"body": [
			"from pyDOE2 import ff2n, fullfact\n",
			"factors = ${1:4}",
			"levels = ${2:2}",
			"design = ff2n(factors)",
			"df = pd.DataFrame(design, columns=list('ABCD'))",
		],
		"description": "DOE, two-level design"
	},

	"doe-twolevel-analysis": {
		"prefix": "doe-twolevel-analysis",
		"body": [
			"from itertools import combinations",
			"from functools import reduce\n",
			"class DoeAnalysis:",
			"\t'''workflow of Two-levels analysis against DOE dataset'''\n",
			"\tfinal_df: pd.DataFrame = None\n",
			"\tdef __init__(self, df: pd.DataFrame, factors: list[str], effect_col: str) -> None:",
			"\t\t'''initialize object\n",
			"\t\tParameters",
			"\t\t----------",
			"\t\tdf",
			"\t\t\tDOE dataset",
			"\t\tfactors",
			"\t\t\ta list of factors",
			"\t\teffect_col",
			"\t\t\tEffect column name of the DOE dataset",
			"\t\t'''",
			"\t\tself.df = df.copy()",
			"\t\tself.factors = factors",
			"\t\tself.effect_col = effect_col\n",
			"\tdef flatten(self, nested_list: typing.Sequence[typing.Sequence]) -> typing.Generator[str,None,None]:",
			"\t\tfor e in nested_list:",
			"\t\t\tif isinstance(e, list): yield from self.flatten(e)",
			"\t\t\telse: yield e\n",
			"\tdef get_interaction_factors(self) -> list[tuple[str]]:",
			"\t\tinteractions = [list(combinations(self.factors, len(self.factors) - i + 1)) for i in range(len(self.factors))]",
			"\t\treturn list(self.flatten(interactions))\n",
			"\tdef get_interaction_effects(self) -> None:",
			"\t\tinteraction_factors = self.get_interaction_factors()",
			"\t\tfor factorial in interaction_factors:",
			"\t\t\tself.df[''.join(factorial)] = reduce(lambda x, y: x * y, [getattr(self.df, f) for f in factorial])\n",
			"\tdef calculate_effects(self, factors: list[str]) -> dict[str,float]:",
			"\t\treturn {factor:self.df.query(f'{factor}==1')[self.effect_col].mean() - self.df.query(f'{factor}==-1')[self.effect_col].mean() for factor in factors}\n",
			"\tdef divide(self, n: int) -> np.ndarray:",
			"\t\t'''divide cumulative probability scale into'''",
			"\t\tt = np.linspace(0,1,n*2)",
			"\t\treturn np.array([t[i] for i in range(n*2) if i % 2 == 1])\n",
			"\tdef transform(self) -> None:",
			"\t\t'''build dataframe of values to plot on half_normal'''",
			"\t\tinteraction_factors = [''.join(e) for e in self.get_interaction_factors()]",
			"\t\tall_factors = self.factors + interaction_factors",
			"\t\tself.get_interaction_effects()",
			"\t\teffects = self.calculate_effects(all_factors)",
			"\t\tabsolute_effects = {k:np.abs(v) for k, v in effects.items()}",
			"\t\tvalues_to_plot = sorted(absolute_effects.items(), key=lambda e: e[1])",
			"\t\tself.final_df = pd.DataFrame(",
			"\t\t\tdata=values_to_plot,",
			"\t\t\tcolumns=['Effect', 'Absolute_Value_of_Effect'],",
			"\t\t\tindex=None,",
			"\t\t)",
			"\t\tself.final_df['Cumulative_Probability'] = self.divide(len(values_to_plot))\n",
			"\tdef build(self) -> typing.Self:",
			"\t\tself.transform()",
			"\t\treturn self\n",
			"\tdef scatter(self) -> None:",
			"\t\t'''plot effect against half normal'''",
			"\t\tsns.scatterplot(self.final_df, x='Absolute_Value_of_Effect', y='Cumulative_Probability')",
			"\t\tfor i in range(self.final_df.shape[0]):",
			"\t\t\tplt.text(self.final_df['Absolute_Value_of_Effect'][i],self.final_df['Cumulative_Probability'][i], self.final_df['Effect'][i], fontsize=12, ha='right', va='bottom')",
			"\tdef pareto(self) -> None:",
			"\t\t'''plot pareto chart of effects'''",
			"\t\tsns.barplot(",
			"\t\t\tself.final_df.sort_values(by='Absolute_Value_of_Effect', ascending=False),",
			"\t\t\tx='Effect',",
			"\t\t\ty='Absolute_Value_of_Effect',",
			"\t\t\thue='Cumulative_Probability'",
			"\t\t)\n",
		],
		"description": "DOE, analyze two-level dataset"
	},

	"flit-init": {
		"prefix": "flit-init",
		"body": [
			"\"\"\"${1:hello world}\"\"\"\n\n",
			"__version__ = \"${2:1.0.0rc}\"\n",
			"from ${3:.module} import ${4:name} #noqa",
		],
		"description": "flit, __init__.py, setup"
	},

	"colorama-init": {
		"prefix": "colorama-init",
		"body": [
			"from colorama import init, Fore, Style",
			"init(autoreset=True)",
			"f'{Fore.RED}{${1:variable}}{Style.RESET_ALL}'",
		],
		"description": "colorama, setup"
	},
}